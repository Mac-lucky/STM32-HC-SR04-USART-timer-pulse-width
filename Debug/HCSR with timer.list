
HCSR with timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08004e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          00000164  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001d4  200001d4  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c400  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a6e  00000000  00000000  0002c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c50  00000000  00000000  0002df10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b78  00000000  00000000  0002eb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000058d4  00000000  00000000  0002f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000405c  00000000  00000000  00034fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00039008  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003800  00000000  00000000  00039084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dec 	.word	0x08004dec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004dec 	.word	0x08004dec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)					//delay function in us
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <delay+0x2c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);	 //
 8000a76:	bf00      	nop
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <delay+0x2c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3f9      	bcc.n	8000a78 <delay+0x14>
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	2000010c 	.word	0x2000010c
 8000a94:	00000000 	.word	0x00000000

08000a98 <HAL_TIM_IC_CaptureCallback>:

#define TRIG_PIN GPIO_PIN_8
#define TRIG_PORT GPIOA

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7f1b      	ldrb	r3, [r3, #28]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d16b      	bne.n	8000b80 <HAL_TIM_IC_CaptureCallback+0xe8>
	{
		if (capturedOne==0) // check if first value is captured
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d11a      	bne.n	8000ae6 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			firstValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);    //read the value
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f002 fd2a 	bl	800350c <HAL_TIM_ReadCapturedValue>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000abc:	601a      	str	r2, [r3, #0]
			capturedOne = 1;  									// change the value of the variable
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);  		//if the value is captured change the polarity to falling edge
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	6a12      	ldr	r2, [r2, #32]
 8000ace:	f022 020a 	bic.w	r2, r2, #10
 8000ad2:	621a      	str	r2, [r3, #32]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	6a12      	ldr	r2, [r2, #32]
 8000ade:	f042 0202 	orr.w	r2, r2, #2
 8000ae2:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);  //change the polarity back to rising edge
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);											//disable the TIM1 interrupt
		}
	}
}
 8000ae4:	e04c      	b.n	8000b80 <HAL_TIM_IC_CaptureCallback+0xe8>
		else if (capturedOne==1)   // if the first value is captured
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d148      	bne.n	8000b80 <HAL_TIM_IC_CaptureCallback+0xe8>
			secondValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f002 fd0b 	bl	800350c <HAL_TIM_ReadCapturedValue>
 8000af6:	4602      	mov	r2, r0
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000afa:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  							// reset the counter
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2200      	movs	r2, #0
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24
			sub = secondValue-firstValue;				//subtraction of the two values
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000b10:	6013      	str	r3, [r2, #0]
			distance = sub * .034/2;			//time in us * speed of sound in air in cm / 2 (the sound needs to go back to the sensor)
 8000b12:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fcfc 	bl	8000514 <__aeabi_ui2d>
 8000b1c:	a31a      	add	r3, pc, #104	; (adr r3, 8000b88 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b22:	f7ff fd6d 	bl	8000600 <__aeabi_dmul>
 8000b26:	4603      	mov	r3, r0
 8000b28:	460c      	mov	r4, r1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b36:	f7ff fe8d 	bl	8000854 <__aeabi_ddiv>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460c      	mov	r4, r1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	4621      	mov	r1, r4
 8000b42:	f7ff ff6f 	bl	8000a24 <__aeabi_d2uiz>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000b4c:	701a      	strb	r2, [r3, #0]
			capturedOne = 0; 					// set the capture value to 0
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);  //change the polarity back to rising edge
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	6a12      	ldr	r2, [r2, #32]
 8000b5e:	f022 020a 	bic.w	r2, r2, #10
 8000b62:	621a      	str	r2, [r3, #32]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	6a12      	ldr	r2, [r2, #32]
 8000b6e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);											//disable the TIM1 interrupt
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	68d2      	ldr	r2, [r2, #12]
 8000b7a:	f022 0202 	bic.w	r2, r2, #2
 8000b7e:	60da      	str	r2, [r3, #12]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	b020c49c 	.word	0xb020c49c
 8000b8c:	3fa16872 	.word	0x3fa16872
 8000b90:	20000098 	.word	0x20000098
 8000b94:	2000008c 	.word	0x2000008c
 8000b98:	20000090 	.word	0x20000090
 8000b9c:	20000094 	.word	0x20000094
 8000ba0:	20000099 	.word	0x20000099
 8000ba4:	2000010c 	.word	0x2000010c

08000ba8 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // TRIG set to HIGH
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f000 fde7 	bl	8001788 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f7ff ff52 	bl	8000a64 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // TRIG set to LOW
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f000 fddd 	bl	8001788 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);				//Enable timer interrupt
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HCSR04_Read+0x3c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HCSR04_Read+0x3c>)
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	68d2      	ldr	r2, [r2, #12]
 8000bd8:	f042 0202 	orr.w	r2, r2, #2
 8000bdc:	60da      	str	r2, [r3, #12]
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000010c 	.word	0x2000010c

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 faaa 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f82c 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f000 f932 	bl	8000e5c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bf8:	f000 f88a 	bl	8000d10 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000bfc:	f000 f8fe 	bl	8000dfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);	//Enable timer interrupt
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <main+0x50>)
 8000c04:	f002 f9a0 	bl	8002f48 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();				//read the value
 8000c08:	f7ff ffce 	bl	8000ba8 <HCSR04_Read>
	  sprintf(uartBuf, "Distance (cm)  = %.1d\r\n", distance);			//convert to string
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <main+0x54>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	490b      	ldr	r1, [pc, #44]	; (8000c40 <main+0x58>)
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <main+0x5c>)
 8000c16:	f003 fccb 	bl	80045b0 <siprintf>
	  		HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <main+0x5c>)
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	4907      	ldr	r1, [pc, #28]	; (8000c44 <main+0x5c>)
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <main+0x60>)
 8000c2a:	f003 f855 	bl	8003cd8 <HAL_UART_Transmit>
	  		HAL_Delay(1000);		//delay 1s
 8000c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c32:	f000 faed 	bl	8001210 <HAL_Delay>
  {
 8000c36:	e7e7      	b.n	8000c08 <main+0x20>
 8000c38:	2000010c 	.word	0x2000010c
 8000c3c:	20000099 	.word	0x20000099
 8000c40:	08004e04 	.word	0x08004e04
 8000c44:	200000a8 	.word	0x200000a8
 8000c48:	2000014c 	.word	0x2000014c

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0a6      	sub	sp, #152	; 0x98
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c56:	2228      	movs	r2, #40	; 0x28
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fca0 	bl	80045a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2258      	movs	r2, #88	; 0x58
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 fc92 	bl	80045a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c84:	2310      	movs	r3, #16
 8000c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fd84 	bl	80017b8 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cb6:	f000 f911 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fc84 	bl	80025e4 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ce2:	f000 f8fb 	bl	8000edc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8000ce6:	f241 0302 	movw	r3, #4098	; 0x1002
 8000cea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 feaa 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d02:	f000 f8eb 	bl	8000edc <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3798      	adds	r7, #152	; 0x98
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d3e:	4a2e      	ldr	r2, [pc, #184]	; (8000df8 <MX_TIM1_Init+0xe8>)
 8000d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000d42:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d44:	2247      	movs	r2, #71	; 0x47
 8000d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d56:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d68:	4822      	ldr	r0, [pc, #136]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d6a:	f002 f88d 	bl	8002e88 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000d74:	f000 f8b2 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	4619      	mov	r1, r3
 8000d84:	481b      	ldr	r0, [pc, #108]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d86:	f002 fb08 	bl	800339a <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000d90:	f000 f8a4 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d94:	4817      	ldr	r0, [pc, #92]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000d96:	f002 f8a2 	bl	8002ede <HAL_TIM_IC_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000da0:	f000 f89c 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480f      	ldr	r0, [pc, #60]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000db8:	f002 fe96 	bl	8003ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000dc2:	f000 f88b 	bl	8000edc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_TIM1_Init+0xe4>)
 8000dde:	f002 fa40 	bl	8003262 <HAL_TIM_IC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000de8:	f000 f878 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3730      	adds	r7, #48	; 0x30
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000010c 	.word	0x2000010c
 8000df8:	40012c00 	.word	0x40012c00

08000dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <MX_USART2_UART_Init+0x5c>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e08:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e40:	f002 fefc 	bl	8003c3c <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f000 f847 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000014c 	.word	0x2000014c
 8000e58:	40004400 	.word	0x40004400

08000e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <MX_GPIO_Init+0x7c>)
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_GPIO_Init+0x7c>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e7c:	6153      	str	r3, [r2, #20]
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_GPIO_Init+0x7c>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <MX_GPIO_Init+0x7c>)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_GPIO_Init+0x7c>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_GPIO_Init+0x7c>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|TRIG_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f000 fc6c 	bl	8001788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = LED_Pin|TRIG_Pin;
 8000eb0:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 fad2 	bl	8001474 <HAL_GPIO_Init>

}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6193      	str	r3, [r2, #24]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x44>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_MspInit+0x44>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	61d3      	str	r3, [r2, #28]
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x44>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f22:	2007      	movs	r0, #7
 8000f24:	f000 fa64 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <HAL_TIM_Base_MspInit+0x8c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12f      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f56:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <HAL_TIM_Base_MspInit+0x90>)
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_TIM_Base_MspInit+0x90>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_TIM_Base_MspInit+0x90>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <HAL_TIM_Base_MspInit+0x90>)
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_TIM_Base_MspInit+0x90>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_TIM_Base_MspInit+0x90>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f86:	2301      	movs	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f96:	2302      	movs	r3, #2
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <HAL_TIM_Base_MspInit+0x94>)
 8000fa2:	f000 fa67 	bl	8001474 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201b      	movs	r0, #27
 8000fac:	f000 fa2b 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fb0:	201b      	movs	r0, #27
 8000fb2:	f000 fa44 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012c00 	.word	0x40012c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_UART_MspInit+0x7c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d128      	bne.n	8001040 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_UART_MspInit+0x80>)
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_UART_MspInit+0x80>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0x80>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <HAL_UART_MspInit+0x80>)
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_UART_MspInit+0x80>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_UART_MspInit+0x80>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800101e:	230c      	movs	r3, #12
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102e:	2307      	movs	r3, #7
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f000 fa1a 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f894 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM1_CC_IRQHandler+0x10>)
 80010b2:	f001 ffb7 	bl	8003024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000010c 	.word	0x2000010c

080010c0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x50>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x16>
		heap_end = &end;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <_sbrk+0x50>)
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <_sbrk+0x54>)
 80010d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <_sbrk+0x50>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <_sbrk+0x50>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	466a      	mov	r2, sp
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d907      	bls.n	80010fa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80010ea:	f003 fa2f 	bl	800454c <__errno>
 80010ee:	4602      	mov	r2, r0
 80010f0:	230c      	movs	r3, #12
 80010f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	e006      	b.n	8001108 <_sbrk+0x48>
	}

	heap_end += incr;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <_sbrk+0x50>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a03      	ldr	r2, [pc, #12]	; (8001110 <_sbrk+0x50>)
 8001104:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000009c 	.word	0x2000009c
 8001114:	200001d4 	.word	0x200001d4

08001118 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <SystemInit+0x28>)
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <SystemInit+0x28>)
 8001120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SystemInit+0x28>)
 800112e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001132:	609a      	str	r2, [r3, #8]
#endif
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_Init+0x28>)
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x28>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f94b 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fec4 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000

08001170 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f963 	bl	800145a <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f92b 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	200001cc 	.word	0x200001cc

080011f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200001cc 	.word	0x200001cc

08001210 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_Delay+0x40>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad2      	subs	r2, r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3f7      	bcc.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	4909      	ldr	r1, [pc, #36]	; (80012f0 <__NVIC_EnableIRQ+0x38>)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	f002 021f 	and.w	r2, r2, #31
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	490d      	ldr	r1, [pc, #52]	; (8001340 <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	4909      	ldr	r1, [pc, #36]	; (8001344 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	2201      	movs	r2, #1
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	1e5a      	subs	r2, r3, #1
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	401a      	ands	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138e:	2101      	movs	r1, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	1e59      	subs	r1, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff90 	bl	80012f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff2b 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff40 	bl	800129c <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff90 	bl	8001348 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5f 	bl	80012f4 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff33 	bl	80012b8 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e160      	b.n	8001746 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8152 	beq.w	8001740 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d00b      	beq.n	80014bc <HAL_GPIO_Init+0x48>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b0:	2b11      	cmp	r3, #17
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b12      	cmp	r3, #18
 80014ba:	d130      	bne.n	800151e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f2:	2201      	movs	r2, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	f003 0201 	and.w	r2, r3, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0xea>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b12      	cmp	r3, #18
 800155c:	d123      	bne.n	80015a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	6939      	ldr	r1, [r7, #16]
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0203 	and.w	r2, r3, #3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80ac 	beq.w	8001740 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e8:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <HAL_GPIO_Init+0x2f0>)
 80015ea:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <HAL_GPIO_Init+0x2f0>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <HAL_GPIO_Init+0x2f0>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001600:	4a59      	ldr	r2, [pc, #356]	; (8001768 <HAL_GPIO_Init+0x2f4>)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800162a:	d025      	beq.n	8001678 <HAL_GPIO_Init+0x204>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a4f      	ldr	r2, [pc, #316]	; (800176c <HAL_GPIO_Init+0x2f8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d01f      	beq.n	8001674 <HAL_GPIO_Init+0x200>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_GPIO_Init+0x2fc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d019      	beq.n	8001670 <HAL_GPIO_Init+0x1fc>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_GPIO_Init+0x300>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d013      	beq.n	800166c <HAL_GPIO_Init+0x1f8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <HAL_GPIO_Init+0x304>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00d      	beq.n	8001668 <HAL_GPIO_Init+0x1f4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_GPIO_Init+0x308>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <HAL_GPIO_Init+0x1f0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a4a      	ldr	r2, [pc, #296]	; (8001780 <HAL_GPIO_Init+0x30c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_GPIO_Init+0x1ec>
 800165c:	2306      	movs	r3, #6
 800165e:	e00c      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001660:	2307      	movs	r3, #7
 8001662:	e00a      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001664:	2305      	movs	r3, #5
 8001666:	e008      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001668:	2304      	movs	r3, #4
 800166a:	e006      	b.n	800167a <HAL_GPIO_Init+0x206>
 800166c:	2303      	movs	r3, #3
 800166e:	e004      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001670:	2302      	movs	r3, #2
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001678:	2300      	movs	r3, #0
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	4093      	lsls	r3, r2
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800168a:	4937      	ldr	r1, [pc, #220]	; (8001768 <HAL_GPIO_Init+0x2f4>)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001698:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <HAL_GPIO_Init+0x310>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016bc:	4a31      	ldr	r2, [pc, #196]	; (8001784 <HAL_GPIO_Init+0x310>)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_GPIO_Init+0x310>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016e6:	4a27      	ldr	r2, [pc, #156]	; (8001784 <HAL_GPIO_Init+0x310>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <HAL_GPIO_Init+0x310>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001710:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <HAL_GPIO_Init+0x310>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_GPIO_Init+0x310>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <HAL_GPIO_Init+0x310>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	f47f ae97 	bne.w	8001484 <HAL_GPIO_Init+0x10>
  }
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000
 800176c:	48000400 	.word	0x48000400
 8001770:	48000800 	.word	0x48000800
 8001774:	48000c00 	.word	0x48000c00
 8001778:	48001000 	.word	0x48001000
 800177c:	48001400 	.word	0x48001400
 8001780:	48001800 	.word	0x48001800
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001798:	787b      	ldrb	r3, [r7, #1]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80017be:	af00      	add	r7, sp, #0
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f000 bf01 	b.w	80025d4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8160 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017e2:	4bae      	ldr	r3, [pc, #696]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d00c      	beq.n	8001808 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ee:	4bab      	ldr	r3, [pc, #684]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d159      	bne.n	80018ae <HAL_RCC_OscConfig+0xf6>
 80017fa:	4ba8      	ldr	r3, [pc, #672]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d152      	bne.n	80018ae <HAL_RCC_OscConfig+0xf6>
 8001808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800181c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d102      	bne.n	800183a <HAL_RCC_OscConfig+0x82>
 8001834:	4b99      	ldr	r3, [pc, #612]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0xae>
 800183a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800184e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001852:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001856:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001862:	4b8e      	ldr	r3, [pc, #568]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800186e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001872:	fa92 f2a2 	rbit	r2, r2
 8001876:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800187a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800187e:	fab2 f282 	clz	r2, r2
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f042 0220 	orr.w	r2, r2, #32
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	f002 021f 	and.w	r2, r2, #31
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8102 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x2e8>
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 80fc 	bne.w	8001aa0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f000 be93 	b.w	80025d4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x110>
 80018ba:	4a78      	ldr	r2, [pc, #480]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80018bc:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e030      	b.n	800192a <HAL_RCC_OscConfig+0x172>
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x134>
 80018d2:	4a72      	ldr	r2, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80018d4:	4b71      	ldr	r3, [pc, #452]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4a6f      	ldr	r2, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80018e0:	4b6e      	ldr	r3, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01e      	b.n	800192a <HAL_RCC_OscConfig+0x172>
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x15a>
 80018f8:	4a68      	ldr	r2, [pc, #416]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80018fa:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x172>
 8001912:	4a62      	ldr	r2, [pc, #392]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001914:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4a5f      	ldr	r2, [pc, #380]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001920:	4b5e      	ldr	r3, [pc, #376]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d059      	beq.n	80019e8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fc60 	bl	80011f8 <HAL_GetTick>
 8001938:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193e:	f7ff fc5b 	bl	80011f8 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d902      	bls.n	8001954 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	f000 be40 	b.w	80025d4 <HAL_RCC_OscConfig+0xe1c>
 8001954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001958:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001968:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d102      	bne.n	8001986 <HAL_RCC_OscConfig+0x1ce>
 8001980:	4b46      	ldr	r3, [pc, #280]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x1fa>
 8001986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800199a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019a2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80019ba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80019be:	fa92 f2a2 	rbit	r2, r2
 80019c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80019c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019ca:	fab2 f282 	clz	r2, r2
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f042 0220 	orr.w	r2, r2, #32
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f002 021f 	and.w	r2, r2, #31
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0ab      	beq.n	800193e <HAL_RCC_OscConfig+0x186>
 80019e6:	e05c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fc06 	bl	80011f8 <HAL_GetTick>
 80019ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f2:	f7ff fc01 	bl	80011f8 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d902      	bls.n	8001a08 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	f000 bde6 	b.w	80025d4 <HAL_RCC_OscConfig+0xe1c>
 8001a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d102      	bne.n	8001a3a <HAL_RCC_OscConfig+0x282>
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x2ae>
 8001a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_RCC_OscConfig+0x2e4>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a6a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a72:	fa92 f2a2 	rbit	r2, r2
 8001a76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a7e:	fab2 f282 	clz	r2, r2
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f002 021f 	and.w	r2, r2, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ab      	bne.n	80019f2 <HAL_RCC_OscConfig+0x23a>
 8001a9a:	e002      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
 8001a9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8170 	beq.w	8001d92 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ab2:	4bd0      	ldr	r3, [pc, #832]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001abe:	4bcd      	ldr	r3, [pc, #820]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d16d      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3ee>
 8001aca:	4bca      	ldr	r3, [pc, #808]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad6:	d166      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3ee>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001aea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d102      	bne.n	8001b08 <HAL_RCC_OscConfig+0x350>
 8001b02:	4bbc      	ldr	r3, [pc, #752]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	e013      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b20:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b2c:	4bb1      	ldr	r3, [pc, #708]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2202      	movs	r2, #2
 8001b32:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b36:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b3a:	fa92 f2a2 	rbit	r2, r2
 8001b3e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001b42:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f042 0220 	orr.w	r2, r2, #32
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f002 021f 	and.w	r2, r2, #31
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d002      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f000 bd31 	b.w	80025d4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	48a0      	ldr	r0, [pc, #640]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001b74:	4b9f      	ldr	r3, [pc, #636]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	21f8      	movs	r1, #248	; 0xf8
 8001b84:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001b8c:	fa91 f1a1 	rbit	r1, r1
 8001b90:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b94:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b98:	fab1 f181 	clz	r1, r1
 8001b9c:	b2c9      	uxtb	r1, r1
 8001b9e:	408b      	lsls	r3, r1
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba4:	e0f5      	b.n	8001d92 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8085 	beq.w	8001cbc <HAL_RCC_OscConfig+0x504>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001bc4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2301      	movs	r3, #1
 8001bdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fb0b 	bl	80011f8 <HAL_GetTick>
 8001be2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff fb06 	bl	80011f8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d902      	bls.n	8001bfe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	f000 bceb 	b.w	80025d4 <HAL_RCC_OscConfig+0xe1c>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c10:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0x476>
 8001c28:	4b72      	ldr	r3, [pc, #456]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	e013      	b.n	8001c56 <HAL_RCC_OscConfig+0x49e>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c46:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c52:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2202      	movs	r2, #2
 8001c58:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c60:	fa92 f2a2 	rbit	r2, r2
 8001c64:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c6c:	fab2 f282 	clz	r2, r2
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f042 0220 	orr.w	r2, r2, #32
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f002 021f 	and.w	r2, r2, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0af      	beq.n	8001be8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	485a      	ldr	r0, [pc, #360]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	21f8      	movs	r1, #248	; 0xf8
 8001c9a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001ca2:	fa91 f1a1 	rbit	r1, r1
 8001ca6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001caa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cae:	fab1 f181 	clz	r1, r1
 8001cb2:	b2c9      	uxtb	r1, r1
 8001cb4:	408b      	lsls	r3, r1
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	6003      	str	r3, [r0, #0]
 8001cba:	e06a      	b.n	8001d92 <HAL_RCC_OscConfig+0x5da>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001cce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fa86 	bl	80011f8 <HAL_GetTick>
 8001cec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fa81 	bl	80011f8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d902      	bls.n	8001d08 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	f000 bc66 	b.w	80025d4 <HAL_RCC_OscConfig+0xe1c>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001d1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x580>
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x5a8>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d5c:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_RCC_OscConfig+0x63c>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2202      	movs	r2, #2
 8001d62:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d66:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d6a:	fa92 f2a2 	rbit	r2, r2
 8001d6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f042 0220 	orr.w	r2, r2, #32
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f002 021f 	and.w	r2, r2, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1af      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80da 	beq.w	8001f56 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d069      	beq.n	8001e80 <HAL_RCC_OscConfig+0x6c8>
 8001dac:	2301      	movs	r3, #1
 8001dae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001dbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_OscConfig+0x640>)
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fa0f 	bl	80011f8 <HAL_GetTick>
 8001dda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e00d      	b.n	8001dfc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fa0a 	bl	80011f8 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d905      	bls.n	8001dfc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e3ef      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	10908120 	.word	0x10908120
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e14:	2202      	movs	r2, #2
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e40:	4ba4      	ldr	r3, [pc, #656]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8001e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e48:	2102      	movs	r1, #2
 8001e4a:	6019      	str	r1, [r3, #0]
 8001e4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f1a3 	rbit	r1, r3
 8001e56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e5a:	6019      	str	r1, [r3, #0]
  return result;
 8001e5c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0b0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x628>
 8001e7e:	e06a      	b.n	8001f56 <HAL_RCC_OscConfig+0x79e>
 8001e80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e96:	601a      	str	r2, [r3, #0]
  return result;
 8001e98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b8c      	ldr	r3, [pc, #560]	; (80020d8 <HAL_RCC_OscConfig+0x920>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	461a      	mov	r2, r3
 8001eae:	2300      	movs	r3, #0
 8001eb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff f9a1 	bl	80011f8 <HAL_GetTick>
 8001eb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eba:	e009      	b.n	8001ed0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7ff f99c 	bl	80011f8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e381      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
 8001ed0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eec:	2202      	movs	r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b6e      	ldr	r3, [pc, #440]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8001f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f20:	2102      	movs	r1, #2
 8001f22:	6019      	str	r1, [r3, #0]
 8001f24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f1a3 	rbit	r1, r3
 8001f2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f32:	6019      	str	r1, [r3, #0]
  return result;
 8001f34:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1b2      	bne.n	8001ebc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8157 	beq.w	8002214 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6c:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d112      	bne.n	8001f9e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4a56      	ldr	r2, [pc, #344]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8001f7a:	4b56      	ldr	r3, [pc, #344]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	61d3      	str	r3, [r2, #28]
 8001f84:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <HAL_RCC_OscConfig+0x924>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11a      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4a4c      	ldr	r2, [pc, #304]	; (80020dc <HAL_RCC_OscConfig+0x924>)
 8001fac:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <HAL_RCC_OscConfig+0x924>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f91f 	bl	80011f8 <HAL_GetTick>
 8001fba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc0:	f7ff f91a 	bl	80011f8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e2ff      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_OscConfig+0x924>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ef      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x840>
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	e02f      	b.n	8002058 <HAL_RCC_OscConfig+0x8a0>
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x864>
 8002002:	4a34      	ldr	r2, [pc, #208]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002010:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0x8a0>
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b05      	cmp	r3, #5
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x888>
 8002026:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0x8a0>
 8002040:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 800204e:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f023 0304 	bic.w	r3, r3, #4
 8002056:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d06a      	beq.n	8002138 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff f8c9 	bl	80011f8 <HAL_GetTick>
 8002066:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff f8c4 	bl	80011f8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e2a7      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
 8002084:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002088:	2202      	movs	r2, #2
 800208a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	fa93 f2a3 	rbit	r2, r3
 8002096:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020a0:	2202      	movs	r2, #2
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fa93 f2a3 	rbit	r2, r3
 80020ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020b2:	601a      	str	r2, [r3, #0]
  return result;
 80020b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d108      	bne.n	80020e0 <HAL_RCC_OscConfig+0x928>
 80020ce:	4b01      	ldr	r3, [pc, #4]	; (80020d4 <HAL_RCC_OscConfig+0x91c>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	e013      	b.n	80020fc <HAL_RCC_OscConfig+0x944>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	10908120 	.word	0x10908120
 80020dc:	40007000 	.word	0x40007000
 80020e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020e4:	2202      	movs	r2, #2
 80020e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f2a3 	rbit	r2, r3
 80020f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	4bc0      	ldr	r3, [pc, #768]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002100:	2102      	movs	r1, #2
 8002102:	6011      	str	r1, [r2, #0]
 8002104:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	fa92 f1a2 	rbit	r1, r2
 800210e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002112:	6011      	str	r1, [r2, #0]
  return result;
 8002114:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	fab2 f282 	clz	r2, r2
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f002 021f 	and.w	r2, r2, #31
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d09a      	beq.n	800206c <HAL_RCC_OscConfig+0x8b4>
 8002136:	e063      	b.n	8002200 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002138:	f7ff f85e 	bl	80011f8 <HAL_GetTick>
 800213c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	e00b      	b.n	800215a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7ff f859 	bl	80011f8 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e23c      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
 800215a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800215e:	2202      	movs	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002176:	2202      	movs	r2, #2
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800218e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_OscConfig+0x9f2>
 80021a4:	4b95      	ldr	r3, [pc, #596]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	e00d      	b.n	80021c6 <HAL_RCC_OscConfig+0xa0e>
 80021aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021ae:	2202      	movs	r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f2a3 	rbit	r2, r3
 80021bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	4b8e      	ldr	r3, [pc, #568]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80021ca:	2102      	movs	r1, #2
 80021cc:	6011      	str	r1, [r2, #0]
 80021ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	fa92 f1a2 	rbit	r1, r2
 80021d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021dc:	6011      	str	r1, [r2, #0]
  return result;
 80021de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f002 021f 	and.w	r2, r2, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1a0      	bne.n	8002142 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002200:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4a7c      	ldr	r2, [pc, #496]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 800220a:	4b7c      	ldr	r3, [pc, #496]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002212:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 81d9 	beq.w	80025d2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002220:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	f000 81a6 	beq.w	800257a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b02      	cmp	r3, #2
 8002236:	f040 811e 	bne.w	8002476 <HAL_RCC_OscConfig+0xcbe>
 800223a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800223e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002252:	601a      	str	r2, [r3, #0]
  return result;
 8002254:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002258:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	461a      	mov	r2, r3
 800226c:	2300      	movs	r3, #0
 800226e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe ffc2 	bl	80011f8 <HAL_GetTick>
 8002274:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002278:	e009      	b.n	800228e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe ffbd 	bl	80011f8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1a2      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
 800228e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022a6:	601a      	str	r2, [r3, #0]
  return result;
 80022a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <HAL_RCC_OscConfig+0xb10>
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	e01b      	b.n	8002300 <HAL_RCC_OscConfig+0xb48>
 80022c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f2a3 	rbit	r2, r3
 80022f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	4b3f      	ldr	r3, [pc, #252]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002304:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002308:	6011      	str	r1, [r2, #0]
 800230a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	fa92 f1a2 	rbit	r1, r2
 8002314:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002318:	6011      	str	r1, [r2, #0]
  return result;
 800231a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f042 0220 	orr.w	r2, r2, #32
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f002 021f 	and.w	r2, r2, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d19e      	bne.n	800227a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	492f      	ldr	r1, [pc, #188]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 800233e:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	f023 020f 	bic.w	r2, r3, #15
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	4313      	orrs	r3, r2
 800234e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002350:	482a      	ldr	r0, [pc, #168]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a19      	ldr	r1, [r3, #32]
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	430b      	orrs	r3, r1
 8002368:	4313      	orrs	r3, r2
 800236a:	6043      	str	r3, [r0, #4]
 800236c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002384:	601a      	str	r2, [r3, #0]
  return result;
 8002386:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800238a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002396:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	461a      	mov	r2, r3
 800239e:	2301      	movs	r3, #1
 80023a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe ff29 	bl	80011f8 <HAL_GetTick>
 80023a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023aa:	e009      	b.n	80023c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe ff24 	bl	80011f8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e109      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
 80023c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023d8:	601a      	str	r2, [r3, #0]
  return result;
 80023da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0xc48>
 80023f4:	4b01      	ldr	r3, [pc, #4]	; (80023fc <HAL_RCC_OscConfig+0xc44>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	e01e      	b.n	8002438 <HAL_RCC_OscConfig+0xc80>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800241e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0xe28>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800243c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002440:	6011      	str	r1, [r2, #0]
 8002442:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	fa92 f1a2 	rbit	r1, r2
 800244c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002450:	6011      	str	r1, [r2, #0]
  return result;
 8002452:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d09b      	beq.n	80023ac <HAL_RCC_OscConfig+0xbf4>
 8002474:	e0ad      	b.n	80025d2 <HAL_RCC_OscConfig+0xe1a>
 8002476:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800247a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800248e:	601a      	str	r2, [r3, #0]
  return result;
 8002490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002494:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	461a      	mov	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fea4 	bl	80011f8 <HAL_GetTick>
 80024b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	e009      	b.n	80024ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe fe9f 	bl	80011f8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e084      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
 80024ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e2:	601a      	str	r2, [r3, #0]
  return result;
 80024e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_OscConfig+0xd4c>
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_RCC_OscConfig+0xe28>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e01b      	b.n	800253c <HAL_RCC_OscConfig+0xd84>
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f107 0320 	add.w	r3, r7, #32
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f2a3 	rbit	r2, r3
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_OscConfig+0xe28>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f107 0214 	add.w	r2, r7, #20
 8002540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002544:	6011      	str	r1, [r2, #0]
 8002546:	f107 0214 	add.w	r2, r7, #20
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	fa92 f1a2 	rbit	r1, r2
 8002550:	f107 0210 	add.w	r2, r7, #16
 8002554:	6011      	str	r1, [r2, #0]
  return result;
 8002556:	f107 0210 	add.w	r2, r7, #16
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d19e      	bne.n	80024b6 <HAL_RCC_OscConfig+0xcfe>
 8002578:	e02b      	b.n	80025d2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e025      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_RCC_OscConfig+0xe28>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_OscConfig+0xe28>)
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002598:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800259c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d111      	bne.n	80025ce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d108      	bne.n	80025ce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80025bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b09e      	sub	sp, #120	; 0x78
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e162      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b90      	ldr	r3, [pc, #576]	; (8002840 <HAL_RCC_ClockConfig+0x25c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0207 	and.w	r2, r3, #7
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d210      	bcs.n	800262c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	498d      	ldr	r1, [pc, #564]	; (8002840 <HAL_RCC_ClockConfig+0x25c>)
 800260c:	4b8c      	ldr	r3, [pc, #560]	; (8002840 <HAL_RCC_ClockConfig+0x25c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 0207 	bic.w	r2, r3, #7
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b89      	ldr	r3, [pc, #548]	; (8002840 <HAL_RCC_ClockConfig+0x25c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0207 	and.w	r2, r3, #7
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e14a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4982      	ldr	r1, [pc, #520]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 800263a:	4b82      	ldr	r3, [pc, #520]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80dc 	beq.w	8002810 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d13c      	bne.n	80026da <HAL_RCC_ClockConfig+0xf6>
 8002660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002664:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800266e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_RCC_ClockConfig+0xa6>
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e00f      	b.n	80026aa <HAL_RCC_ClockConfig+0xc6>
 800268a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
 8002698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269c:	663b      	str	r3, [r7, #96]	; 0x60
 800269e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80026b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d17b      	bne.n	80027ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0f3      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d13c      	bne.n	800275c <HAL_RCC_ClockConfig+0x178>
 80026e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_RCC_ClockConfig+0x128>
 8002706:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e00f      	b.n	800272c <HAL_RCC_ClockConfig+0x148>
 800270c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002710:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
 800271a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271e:	643b      	str	r3, [r7, #64]	; 0x40
 8002720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002728:	4b46      	ldr	r3, [pc, #280]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002730:	63ba      	str	r2, [r7, #56]	; 0x38
 8002732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002734:	fa92 f2a2 	rbit	r2, r2
 8002738:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800273a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800273c:	fab2 f282 	clz	r2, r2
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f042 0220 	orr.w	r2, r2, #32
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f002 021f 	and.w	r2, r2, #31
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d13a      	bne.n	80027ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b2      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
 800275c:	2302      	movs	r3, #2
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d102      	bne.n	8002784 <HAL_RCC_ClockConfig+0x1a0>
 800277e:	4b31      	ldr	r3, [pc, #196]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	e00d      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1bc>
 8002784:	2302      	movs	r3, #2
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	2302      	movs	r3, #2
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2202      	movs	r2, #2
 80027a2:	61ba      	str	r2, [r7, #24]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	fa92 f2a2 	rbit	r2, r2
 80027aa:	617a      	str	r2, [r7, #20]
  return result;
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e079      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	491d      	ldr	r1, [pc, #116]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f023 0203 	bic.w	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fd0a 	bl	80011f8 <HAL_GetTick>
 80027e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fd06 	bl	80011f8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e061      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_RCC_ClockConfig+0x260>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0207 	and.w	r2, r3, #7
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d914      	bls.n	8002848 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 0207 	bic.w	r2, r3, #7
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_RCC_ClockConfig+0x25c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0207 	and.w	r2, r3, #7
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e040      	b.n	80028c2 <HAL_RCC_ClockConfig+0x2de>
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	491d      	ldr	r1, [pc, #116]	; (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002872:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002886:	f000 f829 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800288a:	4601      	mov	r1, r0
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_RCC_ClockConfig+0x2e8>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002894:	22f0      	movs	r2, #240	; 0xf0
 8002896:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	60fa      	str	r2, [r7, #12]
  return result;
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	40d3      	lsrs	r3, r2
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x2ec>)
 80028ac:	5cd3      	ldrb	r3, [r2, r3]
 80028ae:	fa21 f303 	lsr.w	r3, r1, r3
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_RCC_ClockConfig+0x2f0>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_RCC_ClockConfig+0x2f4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fc58 	bl	8001170 <HAL_InitTick>
  
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3778      	adds	r7, #120	; 0x78
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08004e1c 	.word	0x08004e1c
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b08b      	sub	sp, #44	; 0x2c
 80028e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028f6:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x30>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x36>
 800290a:	e03f      	b.n	800298c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800290e:	623b      	str	r3, [r7, #32]
      break;
 8002910:	e03f      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002918:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800291c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	607a      	str	r2, [r7, #4]
  return result;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	40d3      	lsrs	r3, r2
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	220f      	movs	r2, #15
 8002940:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	fa92 f2a2 	rbit	r2, r2
 8002948:	60fa      	str	r2, [r7, #12]
  return result;
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	fab2 f282 	clz	r2, r2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	40d3      	lsrs	r3, r2
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002964:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	e007      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	623b      	str	r3, [r7, #32]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800298e:	623b      	str	r3, [r7, #32]
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	6a3b      	ldr	r3, [r7, #32]
}
 8002994:	4618      	mov	r0, r3
 8002996:	372c      	adds	r7, #44	; 0x2c
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	08004e34 	.word	0x08004e34
 80029ac:	08004e44 	.word	0x08004e44

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029ce:	f7ff ffef 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d2:	4601      	mov	r1, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	603a      	str	r2, [r7, #0]
  return result;
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	40d3      	lsrs	r3, r2
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x40>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08004e2c 	.word	0x08004e2c

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a12:	f7ff ffcd 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 8002a16:	4601      	mov	r1, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	fa92 f2a2 	rbit	r2, r2
 8002a2c:	603a      	str	r2, [r7, #0]
  return result;
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	40d3      	lsrs	r3, r2
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08004e2c 	.word	0x08004e2c

08002a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b092      	sub	sp, #72	; 0x48
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80d7 	beq.w	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a74:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10e      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	61d3      	str	r3, [r2, #28]
 8002a8c:	4b48      	ldr	r3, [pc, #288]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4a42      	ldr	r2, [pc, #264]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aac:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fb9f 	bl	80011f8 <HAL_GetTick>
 8002aba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe fb9b 	bl	80011f8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	; 0x64
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1d5      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8084 	beq.w	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d07c      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002afc:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	2301      	movs	r3, #1
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d04b      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fb4b 	bl	80011f8 <HAL_GetTick>
 8002b62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe fb47 	bl	80011f8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e17f      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	2302      	movs	r3, #2
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	61fb      	str	r3, [r7, #28]
  return result;
 8002b94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d108      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002baa:	4b01      	ldr	r3, [pc, #4]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	e00d      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	10908100 	.word	0x10908100
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	4b9f      	ldr	r3, [pc, #636]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2202      	movs	r2, #2
 8002bce:	613a      	str	r2, [r7, #16]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	fa92 f2a2 	rbit	r2, r2
 8002bd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	fab2 f282 	clz	r2, r2
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f002 021f 	and.w	r2, r2, #31
 8002bea:	2101      	movs	r1, #1
 8002bec:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0b7      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bf6:	4994      	ldr	r1, [pc, #592]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002bf8:	4b93      	ldr	r3, [pc, #588]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4a8d      	ldr	r2, [pc, #564]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c12:	4b8d      	ldr	r3, [pc, #564]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c28:	4987      	ldr	r1, [pc, #540]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c2a:	4b87      	ldr	r3, [pc, #540]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c46:	4980      	ldr	r1, [pc, #512]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c48:	4b7f      	ldr	r3, [pc, #508]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c64:	4978      	ldr	r1, [pc, #480]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c66:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c82:	4971      	ldr	r1, [pc, #452]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c84:	4b70      	ldr	r3, [pc, #448]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f023 0210 	bic.w	r2, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ca0:	4969      	ldr	r1, [pc, #420]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002ca2:	4b69      	ldr	r3, [pc, #420]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cbe:	4962      	ldr	r1, [pc, #392]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002cc0:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f023 0220 	bic.w	r2, r3, #32
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cdc:	495a      	ldr	r1, [pc, #360]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002cde:	4b5a      	ldr	r3, [pc, #360]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	4313      	orrs	r3, r2
 8002cec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cfa:	4953      	ldr	r1, [pc, #332]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002cfc:	4b52      	ldr	r3, [pc, #328]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d18:	494b      	ldr	r1, [pc, #300]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d36:	4944      	ldr	r1, [pc, #272]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d38:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d54:	493c      	ldr	r1, [pc, #240]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d56:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	4313      	orrs	r3, r2
 8002d64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d72:	4935      	ldr	r1, [pc, #212]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	4313      	orrs	r3, r2
 8002d82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d90:	492d      	ldr	r1, [pc, #180]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002dae:	4926      	ldr	r1, [pc, #152]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002dcc:	491e      	ldr	r1, [pc, #120]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002dea:	4917      	ldr	r1, [pc, #92]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e08:	490f      	ldr	r1, [pc, #60]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4313      	orrs	r3, r2
 8002e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e26:	4908      	ldr	r1, [pc, #32]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	4313      	orrs	r3, r2
 8002e36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e44:	4900      	ldr	r1, [pc, #0]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8002e46:	e001      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e68:	4906      	ldr	r1, [pc, #24]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	4313      	orrs	r3, r2
 8002e78:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3748      	adds	r7, #72	; 0x48
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000

08002e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e01d      	b.n	8002ed6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f840 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f000 fb8c 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01d      	b.n	8002f2c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f815 	bl	8002f34 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fb61 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d841      	bhi.n	8002fdc <HAL_TIM_IC_Start_IT+0x94>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_TIM_IC_Start_IT+0x18>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08002fdd 	.word	0x08002fdd
 8002f68:	08002fdd 	.word	0x08002fdd
 8002f6c:	08002fdd 	.word	0x08002fdd
 8002f70:	08002fa7 	.word	0x08002fa7
 8002f74:	08002fdd 	.word	0x08002fdd
 8002f78:	08002fdd 	.word	0x08002fdd
 8002f7c:	08002fdd 	.word	0x08002fdd
 8002f80:	08002fb9 	.word	0x08002fb9
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002fdd 	.word	0x08002fdd
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08002fcb 	.word	0x08002fcb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	f042 0202 	orr.w	r2, r2, #2
 8002fa2:	60da      	str	r2, [r3, #12]
      break;
 8002fa4:	e01b      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	68d2      	ldr	r2, [r2, #12]
 8002fb0:	f042 0204 	orr.w	r2, r2, #4
 8002fb4:	60da      	str	r2, [r3, #12]
      break;
 8002fb6:	e012      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	60da      	str	r2, [r3, #12]
      break;
 8002fc8:	e009      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	68d2      	ldr	r2, [r2, #12]
 8002fd4:	f042 0210 	orr.w	r2, r2, #16
 8002fd8:	60da      	str	r2, [r3, #12]
      break;
 8002fda:	e000      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002fdc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	6839      	ldr	r1, [r7, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fd58 	bl	8003a9c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_TIM_IC_Start_IT+0xd8>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d00b      	beq.n	8003016 <HAL_TIM_IC_Start_IT+0xce>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d007      	beq.n	8003016 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	00010007 	.word	0x00010007

08003024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b02      	cmp	r3, #2
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0202 	mvn.w	r2, #2
 8003050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fd16 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa9a 	bl	80035a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 faa1 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0204 	mvn.w	r2, #4
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fcec 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa70 	bl	80035a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa77 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d122      	bne.n	8003128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d11b      	bne.n	8003128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0208 	mvn.w	r2, #8
 80030f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2204      	movs	r2, #4
 80030fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fcc2 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa46 	bl	80035a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fa4d 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b10      	cmp	r3, #16
 8003134:	d122      	bne.n	800317c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b10      	cmp	r3, #16
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0210 	mvn.w	r2, #16
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2208      	movs	r2, #8
 8003152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fc98 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa1c 	bl	80035a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fa23 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0201 	mvn.w	r2, #1
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9f6 	bl	8003594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b2:	2b80      	cmp	r3, #128	; 0x80
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fd20 	bl	8003c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e2:	d10e      	bne.n	8003202 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d107      	bne.n	8003202 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fd13 	bl	8003c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	2b40      	cmp	r3, #64	; 0x40
 800320e:	d10e      	bne.n	800322e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d107      	bne.n	800322e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f9d1 	bl	80035d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b20      	cmp	r3, #32
 800323a:	d10e      	bne.n	800325a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d107      	bne.n	800325a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f06f 0220 	mvn.w	r2, #32
 8003252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fcd3 	bl	8003c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_TIM_IC_ConfigChannel+0x1a>
 8003278:	2302      	movs	r3, #2
 800327a:	e08a      	b.n	8003392 <HAL_TIM_IC_ConfigChannel+0x130>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d11b      	bne.n	80032ca <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f000 fa3d 	bl	8003720 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6992      	ldr	r2, [r2, #24]
 80032b0:	f022 020c 	bic.w	r2, r2, #12
 80032b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	6991      	ldr	r1, [r2, #24]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]
 80032c8:	e05a      	b.n	8003380 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11c      	bne.n	800330a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f000 fabb 	bl	800385a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	6992      	ldr	r2, [r2, #24]
 80032ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	6991      	ldr	r1, [r2, #24]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	6892      	ldr	r2, [r2, #8]
 8003302:	0212      	lsls	r2, r2, #8
 8003304:	430a      	orrs	r2, r1
 8003306:	619a      	str	r2, [r3, #24]
 8003308:	e03a      	b.n	8003380 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f000 fb08 	bl	8003934 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	69d2      	ldr	r2, [r2, #28]
 800332e:	f022 020c 	bic.w	r2, r2, #12
 8003332:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	69d1      	ldr	r1, [r2, #28]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	430a      	orrs	r2, r1
 8003344:	61da      	str	r2, [r3, #28]
 8003346:	e01b      	b.n	8003380 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f000 fb28 	bl	80039ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	69d2      	ldr	r2, [r2, #28]
 8003366:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800336a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	69d1      	ldr	r1, [r2, #28]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	0212      	lsls	r2, r2, #8
 800337c:	430a      	orrs	r2, r1
 800337e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_TIM_ConfigClockSource+0x18>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0a8      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x16a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d067      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x124>
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d80b      	bhi.n	800340a <HAL_TIM_ConfigClockSource+0x70>
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d073      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x144>
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d802      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x66>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d06f      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033fe:	e078      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003400:	2b20      	cmp	r3, #32
 8003402:	d06c      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x144>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d06a      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003408:	e073      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800340a:	2b70      	cmp	r3, #112	; 0x70
 800340c:	d00d      	beq.n	800342a <HAL_TIM_ConfigClockSource+0x90>
 800340e:	2b70      	cmp	r3, #112	; 0x70
 8003410:	d804      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x82>
 8003412:	2b50      	cmp	r3, #80	; 0x50
 8003414:	d033      	beq.n	800347e <HAL_TIM_ConfigClockSource+0xe4>
 8003416:	2b60      	cmp	r3, #96	; 0x60
 8003418:	d041      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x104>
      break;
 800341a:	e06a      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d066      	beq.n	80034f0 <HAL_TIM_ConfigClockSource+0x156>
 8003422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003426:	d017      	beq.n	8003458 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003428:	e063      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f000 fb0f 	bl	8003a5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800344c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
      break;
 8003456:	e04c      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6899      	ldr	r1, [r3, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f000 faf8 	bl	8003a5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800347a:	609a      	str	r2, [r3, #8]
      break;
 800347c:	e039      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	f000 f9b6 	bl	80037fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2150      	movs	r1, #80	; 0x50
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fac5 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 800349c:	e029      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f000 fa12 	bl	80038d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2160      	movs	r1, #96	; 0x60
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fab5 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 80034bc:	e019      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f000 f996 	bl	80037fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2140      	movs	r1, #64	; 0x40
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 faa5 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 80034dc:	e009      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f000 fa9c 	bl	8003a26 <TIM_ITRx_SetConfig>
      break;
 80034ee:	e000      	b.n	80034f2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80034f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d831      	bhi.n	8003584 <HAL_TIM_ReadCapturedValue+0x78>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800355d 	.word	0x0800355d
 800352c:	08003585 	.word	0x08003585
 8003530:	08003585 	.word	0x08003585
 8003534:	08003585 	.word	0x08003585
 8003538:	08003567 	.word	0x08003567
 800353c:	08003585 	.word	0x08003585
 8003540:	08003585 	.word	0x08003585
 8003544:	08003585 	.word	0x08003585
 8003548:	08003571 	.word	0x08003571
 800354c:	08003585 	.word	0x08003585
 8003550:	08003585 	.word	0x08003585
 8003554:	08003585 	.word	0x08003585
 8003558:	0800357b 	.word	0x0800357b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	60fb      	str	r3, [r7, #12]

      break;
 8003564:	e00f      	b.n	8003586 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	60fb      	str	r3, [r7, #12]

      break;
 800356e:	e00a      	b.n	8003586 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	60fb      	str	r3, [r7, #12]

      break;
 8003578:	e005      	b.n	8003586 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	60fb      	str	r3, [r7, #12]

      break;
 8003582:	e000      	b.n	8003586 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003584:	bf00      	nop
  }

  return tmpreg;
 8003586:	68fb      	ldr	r3, [r7, #12]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a42      	ldr	r2, [pc, #264]	; (8003700 <TIM_Base_SetConfig+0x11c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003602:	d00f      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3f      	ldr	r2, [pc, #252]	; (8003704 <TIM_Base_SetConfig+0x120>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00b      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3e      	ldr	r2, [pc, #248]	; (8003708 <TIM_Base_SetConfig+0x124>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <TIM_Base_SetConfig+0x128>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3c      	ldr	r2, [pc, #240]	; (8003710 <TIM_Base_SetConfig+0x12c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d108      	bne.n	8003636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a31      	ldr	r2, [pc, #196]	; (8003700 <TIM_Base_SetConfig+0x11c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01f      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d01b      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <TIM_Base_SetConfig+0x120>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d017      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <TIM_Base_SetConfig+0x124>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <TIM_Base_SetConfig+0x128>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <TIM_Base_SetConfig+0x130>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2b      	ldr	r2, [pc, #172]	; (8003718 <TIM_Base_SetConfig+0x134>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <TIM_Base_SetConfig+0x138>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <TIM_Base_SetConfig+0x12c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <TIM_Base_SetConfig+0x11c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <TIM_Base_SetConfig+0x100>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <TIM_Base_SetConfig+0x128>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00f      	beq.n	80036e4 <TIM_Base_SetConfig+0x100>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <TIM_Base_SetConfig+0x130>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <TIM_Base_SetConfig+0x100>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a12      	ldr	r2, [pc, #72]	; (8003718 <TIM_Base_SetConfig+0x134>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d007      	beq.n	80036e4 <TIM_Base_SetConfig+0x100>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a11      	ldr	r2, [pc, #68]	; (800371c <TIM_Base_SetConfig+0x138>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0x100>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <TIM_Base_SetConfig+0x12c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40013400 	.word	0x40013400
 8003710:	40015000 	.word	0x40015000
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800

08003720 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a26      	ldr	r2, [pc, #152]	; (80037e4 <TIM_TI1_SetConfig+0xc4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d017      	beq.n	800377e <TIM_TI1_SetConfig+0x5e>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d013      	beq.n	800377e <TIM_TI1_SetConfig+0x5e>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <TIM_TI1_SetConfig+0xc8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00f      	beq.n	800377e <TIM_TI1_SetConfig+0x5e>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <TIM_TI1_SetConfig+0xcc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00b      	beq.n	800377e <TIM_TI1_SetConfig+0x5e>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <TIM_TI1_SetConfig+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <TIM_TI1_SetConfig+0x5e>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <TIM_TI1_SetConfig+0xd4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_TI1_SetConfig+0x5e>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <TIM_TI1_SetConfig+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <TIM_TI1_SetConfig+0x62>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <TIM_TI1_SetConfig+0x64>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e003      	b.n	80037a2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f023 030a 	bic.w	r3, r3, #10
 80037bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 030a 	and.w	r3, r3, #10
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40013400 	.word	0x40013400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40015000 	.word	0x40015000

080037fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 030a 	bic.w	r3, r3, #10
 8003838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800385a:	b480      	push	{r7}
 800385c:	b087      	sub	sp, #28
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f023 0210 	bic.w	r2, r3, #16
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003886:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	031b      	lsls	r3, r3, #12
 800389e:	b29b      	uxth	r3, r3
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f023 0210 	bic.w	r2, r3, #16
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	031b      	lsls	r3, r3, #12
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	621a      	str	r2, [r3, #32]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 0303 	bic.w	r3, r3, #3
 8003960:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003970:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	b2db      	uxtb	r3, r3
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003984:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	621a      	str	r2, [r3, #32]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	031b      	lsls	r3, r3, #12
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80039fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	031b      	lsls	r3, r3, #12
 8003a04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f043 0307 	orr.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	021a      	lsls	r2, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2201      	movs	r2, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1a      	ldr	r2, [r3, #32]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	401a      	ands	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e06d      	b.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d01d      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d018      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d013      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00e      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a11      	ldr	r2, [pc, #68]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10c      	bne.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40013400 	.word	0x40013400
 8003bf0:	40015000 	.word	0x40015000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40014000 	.word	0x40014000

08003c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e040      	b.n	8003cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fd f9b4 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8c0 	bl	8003e00 <UART_SetConfig>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e022      	b.n	8003cd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 face 	bl	8004234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	6852      	ldr	r2, [r2, #4]
 8003ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fb55 	bl	8004378 <UART_CheckIdleState>
 8003cce:	4603      	mov	r3, r0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	f040 8081 	bne.w	8003df4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_UART_Transmit+0x26>
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e079      	b.n	8003df6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_UART_Transmit+0x38>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e072      	b.n	8003df6 <HAL_UART_Transmit+0x11e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2221      	movs	r2, #33	; 0x21
 8003d22:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d24:	f7fd fa68 	bl	80011f8 <HAL_GetTick>
 8003d28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	88fa      	ldrh	r2, [r7, #6]
 8003d2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	88fa      	ldrh	r2, [r7, #6]
 8003d36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d42:	d108      	bne.n	8003d56 <HAL_UART_Transmit+0x7e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	e003      	b.n	8003d5e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d5e:	e02d      	b.n	8003dbc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	2180      	movs	r1, #128	; 0x80
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fb49 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e03d      	b.n	8003df6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	8812      	ldrh	r2, [r2, #0]
 8003d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d8c:	b292      	uxth	r2, r2
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	3302      	adds	r3, #2
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	e008      	b.n	8003daa <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	7812      	ldrb	r2, [r2, #0]
 8003da0:	b292      	uxth	r2, r2
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1cb      	bne.n	8003d60 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2140      	movs	r1, #64	; 0x40
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fb15 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e009      	b.n	8003df6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3720      	adds	r7, #32
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	4bab      	ldr	r3, [pc, #684]	; (80040e0 <UART_SetConfig+0x2e0>)
 8003e34:	400b      	ands	r3, r1
 8003e36:	6939      	ldr	r1, [r7, #16]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	6852      	ldr	r2, [r2, #4]
 8003e46:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68d2      	ldr	r2, [r2, #12]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a9a      	ldr	r2, [pc, #616]	; (80040e4 <UART_SetConfig+0x2e4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d121      	bne.n	8003ec4 <UART_SetConfig+0xc4>
 8003e80:	4b99      	ldr	r3, [pc, #612]	; (80040e8 <UART_SetConfig+0x2e8>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d817      	bhi.n	8003ebc <UART_SetConfig+0xbc>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x94>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb1 	.word	0x08003eb1
 8003e9c:	08003eb7 	.word	0x08003eb7
 8003ea0:	08003eab 	.word	0x08003eab
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e0b2      	b.n	8004010 <UART_SetConfig+0x210>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e0af      	b.n	8004010 <UART_SetConfig+0x210>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e0ac      	b.n	8004010 <UART_SetConfig+0x210>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e0a9      	b.n	8004010 <UART_SetConfig+0x210>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	bf00      	nop
 8003ec2:	e0a5      	b.n	8004010 <UART_SetConfig+0x210>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a88      	ldr	r2, [pc, #544]	; (80040ec <UART_SetConfig+0x2ec>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d123      	bne.n	8003f16 <UART_SetConfig+0x116>
 8003ece:	4b86      	ldr	r3, [pc, #536]	; (80040e8 <UART_SetConfig+0x2e8>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eda:	d012      	beq.n	8003f02 <UART_SetConfig+0x102>
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d802      	bhi.n	8003ee8 <UART_SetConfig+0xe8>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <UART_SetConfig+0xf6>
 8003ee6:	e012      	b.n	8003f0e <UART_SetConfig+0x10e>
 8003ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eec:	d00c      	beq.n	8003f08 <UART_SetConfig+0x108>
 8003eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ef2:	d003      	beq.n	8003efc <UART_SetConfig+0xfc>
 8003ef4:	e00b      	b.n	8003f0e <UART_SetConfig+0x10e>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e089      	b.n	8004010 <UART_SetConfig+0x210>
 8003efc:	2302      	movs	r3, #2
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e086      	b.n	8004010 <UART_SetConfig+0x210>
 8003f02:	2304      	movs	r3, #4
 8003f04:	77fb      	strb	r3, [r7, #31]
 8003f06:	e083      	b.n	8004010 <UART_SetConfig+0x210>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e080      	b.n	8004010 <UART_SetConfig+0x210>
 8003f0e:	2310      	movs	r3, #16
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	bf00      	nop
 8003f14:	e07c      	b.n	8004010 <UART_SetConfig+0x210>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a75      	ldr	r2, [pc, #468]	; (80040f0 <UART_SetConfig+0x2f0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d123      	bne.n	8003f68 <UART_SetConfig+0x168>
 8003f20:	4b71      	ldr	r3, [pc, #452]	; (80040e8 <UART_SetConfig+0x2e8>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f2c:	d012      	beq.n	8003f54 <UART_SetConfig+0x154>
 8003f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f32:	d802      	bhi.n	8003f3a <UART_SetConfig+0x13a>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <UART_SetConfig+0x148>
 8003f38:	e012      	b.n	8003f60 <UART_SetConfig+0x160>
 8003f3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f3e:	d00c      	beq.n	8003f5a <UART_SetConfig+0x15a>
 8003f40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f44:	d003      	beq.n	8003f4e <UART_SetConfig+0x14e>
 8003f46:	e00b      	b.n	8003f60 <UART_SetConfig+0x160>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e060      	b.n	8004010 <UART_SetConfig+0x210>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e05d      	b.n	8004010 <UART_SetConfig+0x210>
 8003f54:	2304      	movs	r3, #4
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e05a      	b.n	8004010 <UART_SetConfig+0x210>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e057      	b.n	8004010 <UART_SetConfig+0x210>
 8003f60:	2310      	movs	r3, #16
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	bf00      	nop
 8003f66:	e053      	b.n	8004010 <UART_SetConfig+0x210>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a61      	ldr	r2, [pc, #388]	; (80040f4 <UART_SetConfig+0x2f4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d123      	bne.n	8003fba <UART_SetConfig+0x1ba>
 8003f72:	4b5d      	ldr	r3, [pc, #372]	; (80040e8 <UART_SetConfig+0x2e8>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7e:	d012      	beq.n	8003fa6 <UART_SetConfig+0x1a6>
 8003f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f84:	d802      	bhi.n	8003f8c <UART_SetConfig+0x18c>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <UART_SetConfig+0x19a>
 8003f8a:	e012      	b.n	8003fb2 <UART_SetConfig+0x1b2>
 8003f8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f90:	d00c      	beq.n	8003fac <UART_SetConfig+0x1ac>
 8003f92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f96:	d003      	beq.n	8003fa0 <UART_SetConfig+0x1a0>
 8003f98:	e00b      	b.n	8003fb2 <UART_SetConfig+0x1b2>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	e037      	b.n	8004010 <UART_SetConfig+0x210>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e034      	b.n	8004010 <UART_SetConfig+0x210>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e031      	b.n	8004010 <UART_SetConfig+0x210>
 8003fac:	2308      	movs	r3, #8
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e02e      	b.n	8004010 <UART_SetConfig+0x210>
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	bf00      	nop
 8003fb8:	e02a      	b.n	8004010 <UART_SetConfig+0x210>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <UART_SetConfig+0x2f8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d123      	bne.n	800400c <UART_SetConfig+0x20c>
 8003fc4:	4b48      	ldr	r3, [pc, #288]	; (80040e8 <UART_SetConfig+0x2e8>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d012      	beq.n	8003ff8 <UART_SetConfig+0x1f8>
 8003fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd6:	d802      	bhi.n	8003fde <UART_SetConfig+0x1de>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <UART_SetConfig+0x1ec>
 8003fdc:	e012      	b.n	8004004 <UART_SetConfig+0x204>
 8003fde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fe2:	d00c      	beq.n	8003ffe <UART_SetConfig+0x1fe>
 8003fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fe8:	d003      	beq.n	8003ff2 <UART_SetConfig+0x1f2>
 8003fea:	e00b      	b.n	8004004 <UART_SetConfig+0x204>
 8003fec:	2300      	movs	r3, #0
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e00e      	b.n	8004010 <UART_SetConfig+0x210>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e00b      	b.n	8004010 <UART_SetConfig+0x210>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e008      	b.n	8004010 <UART_SetConfig+0x210>
 8003ffe:	2308      	movs	r3, #8
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e005      	b.n	8004010 <UART_SetConfig+0x210>
 8004004:	2310      	movs	r3, #16
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	bf00      	nop
 800400a:	e001      	b.n	8004010 <UART_SetConfig+0x210>
 800400c:	2310      	movs	r3, #16
 800400e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004018:	f040 8090 	bne.w	800413c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800401c:	7ffb      	ldrb	r3, [r7, #31]
 800401e:	2b08      	cmp	r3, #8
 8004020:	d86c      	bhi.n	80040fc <UART_SetConfig+0x2fc>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0x228>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	0800404d 	.word	0x0800404d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	0800408d 	.word	0x0800408d
 8004034:	080040fd 	.word	0x080040fd
 8004038:	080040a9 	.word	0x080040a9
 800403c:	080040fd 	.word	0x080040fd
 8004040:	080040fd 	.word	0x080040fd
 8004044:	080040fd 	.word	0x080040fd
 8004048:	080040c9 	.word	0x080040c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800404c:	f7fe fcbc 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8004050:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	005a      	lsls	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	b29b      	uxth	r3, r3
 8004068:	61bb      	str	r3, [r7, #24]
        break;
 800406a:	e04a      	b.n	8004102 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe fcce 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8004070:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	005a      	lsls	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	441a      	add	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	61bb      	str	r3, [r7, #24]
        break;
 800408a:	e03a      	b.n	8004102 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004096:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6852      	ldr	r2, [r2, #4]
 800409e:	fbb3 f3f2 	udiv	r3, r3, r2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	61bb      	str	r3, [r7, #24]
        break;
 80040a6:	e02c      	b.n	8004102 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a8:	f7fe fc18 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 80040ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	005a      	lsls	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	61bb      	str	r3, [r7, #24]
        break;
 80040c6:	e01c      	b.n	8004102 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	b29b      	uxth	r3, r3
 80040dc:	61bb      	str	r3, [r7, #24]
        break;
 80040de:	e010      	b.n	8004102 <UART_SetConfig+0x302>
 80040e0:	efff69f3 	.word	0xefff69f3
 80040e4:	40013800 	.word	0x40013800
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40004400 	.word	0x40004400
 80040f0:	40004800 	.word	0x40004800
 80040f4:	40004c00 	.word	0x40004c00
 80040f8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
        break;
 8004100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b0f      	cmp	r3, #15
 8004106:	d916      	bls.n	8004136 <UART_SetConfig+0x336>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410e:	d212      	bcs.n	8004136 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	b29b      	uxth	r3, r3
 8004114:	f023 030f 	bic.w	r3, r3, #15
 8004118:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	b29a      	uxth	r2, r3
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	4313      	orrs	r3, r2
 800412a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	897a      	ldrh	r2, [r7, #10]
 8004132:	60da      	str	r2, [r3, #12]
 8004134:	e072      	b.n	800421c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
 800413a:	e06f      	b.n	800421c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800413c:	7ffb      	ldrb	r3, [r7, #31]
 800413e:	2b08      	cmp	r3, #8
 8004140:	d85b      	bhi.n	80041fa <UART_SetConfig+0x3fa>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x348>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	0800416d 	.word	0x0800416d
 800414c:	0800418b 	.word	0x0800418b
 8004150:	080041a9 	.word	0x080041a9
 8004154:	080041fb 	.word	0x080041fb
 8004158:	080041c5 	.word	0x080041c5
 800415c:	080041fb 	.word	0x080041fb
 8004160:	080041fb 	.word	0x080041fb
 8004164:	080041fb 	.word	0x080041fb
 8004168:	080041e3 	.word	0x080041e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7fe fc2c 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8004170:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	085a      	lsrs	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	441a      	add	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	b29b      	uxth	r3, r3
 8004186:	61bb      	str	r3, [r7, #24]
        break;
 8004188:	e03a      	b.n	8004200 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418a:	f7fe fc3f 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 800418e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	085a      	lsrs	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	61bb      	str	r3, [r7, #24]
        break;
 80041a6:	e02b      	b.n	8004200 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80041b2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6852      	ldr	r2, [r2, #4]
 80041ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	61bb      	str	r3, [r7, #24]
        break;
 80041c2:	e01d      	b.n	8004200 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c4:	f7fe fb8a 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 80041c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	085a      	lsrs	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	441a      	add	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	b29b      	uxth	r3, r3
 80041de:	61bb      	str	r3, [r7, #24]
        break;
 80041e0:	e00e      	b.n	8004200 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e002      	b.n	8004200 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
        break;
 80041fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b0f      	cmp	r3, #15
 8004204:	d908      	bls.n	8004218 <UART_SetConfig+0x418>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d204      	bcs.n	8004218 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	e001      	b.n	800421c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop

08004234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	6852      	ldr	r2, [r2, #4]
 8004252:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	6852      	ldr	r2, [r2, #4]
 8004274:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	6852      	ldr	r2, [r2, #4]
 8004296:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	6852      	ldr	r2, [r2, #4]
 80042b8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	6892      	ldr	r2, [r2, #8]
 80042da:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6892      	ldr	r2, [r2, #8]
 80042fc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004304:	430a      	orrs	r2, r1
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	6852      	ldr	r2, [r2, #4]
 800431e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004332:	d10a      	bne.n	800434a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	6852      	ldr	r2, [r2, #4]
 800433e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	6852      	ldr	r2, [r2, #4]
 8004360:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af02      	add	r7, sp, #8
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004386:	f7fc ff37 	bl	80011f8 <HAL_GetTick>
 800438a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b08      	cmp	r3, #8
 8004398:	d10e      	bne.n	80043b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800439a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f82a 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e020      	b.n	80043fa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d10e      	bne.n	80043e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f814 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e00a      	b.n	80043fa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004412:	e05d      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d059      	beq.n	80044d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fc feec 	bl	80011f8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	1ad2      	subs	r2, r2, r3
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	429a      	cmp	r2, r3
 800442a:	d802      	bhi.n	8004432 <UART_WaitOnFlagUntilTimeout+0x30>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11b      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004440:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	6892      	ldr	r2, [r2, #8]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e042      	b.n	80044f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02b      	beq.n	80044d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004486:	d123      	bne.n	80044d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004490:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e00f      	b.n	80044f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	401a      	ands	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	429a      	cmp	r2, r3
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d092      	beq.n	8004414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80044f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004530 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80044fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80044fe:	e003      	b.n	8004508 <LoopCopyDataInit>

08004500 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004502:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004504:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004506:	3104      	adds	r1, #4

08004508 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004508:	480b      	ldr	r0, [pc, #44]	; (8004538 <LoopForever+0xa>)
	ldr	r3, =_edata
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <LoopForever+0xe>)
	adds	r2, r0, r1
 800450c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800450e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004510:	d3f6      	bcc.n	8004500 <CopyDataInit>
	ldr	r2, =_sbss
 8004512:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004514:	e002      	b.n	800451c <LoopFillZerobss>

08004516 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004516:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004518:	f842 3b04 	str.w	r3, [r2], #4

0800451c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <LoopForever+0x16>)
	cmp	r2, r3
 800451e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004520:	d3f9      	bcc.n	8004516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004522:	f7fc fdf9 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004526:	f000 f817 	bl	8004558 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800452a:	f7fc fb5d 	bl	8000be8 <main>

0800452e <LoopForever>:

LoopForever:
    b LoopForever
 800452e:	e7fe      	b.n	800452e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004530:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004534:	08004e90 	.word	0x08004e90
	ldr	r0, =_sdata
 8004538:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800453c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8004540:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8004544:	200001d4 	.word	0x200001d4

08004548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004548:	e7fe      	b.n	8004548 <ADC1_2_IRQHandler>
	...

0800454c <__errno>:
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <__errno+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	2000000c 	.word	0x2000000c

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4e0d      	ldr	r6, [pc, #52]	; (8004590 <__libc_init_array+0x38>)
 800455c:	4c0d      	ldr	r4, [pc, #52]	; (8004594 <__libc_init_array+0x3c>)
 800455e:	1ba4      	subs	r4, r4, r6
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	2500      	movs	r5, #0
 8004564:	42a5      	cmp	r5, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	4e0b      	ldr	r6, [pc, #44]	; (8004598 <__libc_init_array+0x40>)
 800456a:	4c0c      	ldr	r4, [pc, #48]	; (800459c <__libc_init_array+0x44>)
 800456c:	f000 fc3e 	bl	8004dec <_init>
 8004570:	1ba4      	subs	r4, r4, r6
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	2500      	movs	r5, #0
 8004576:	42a5      	cmp	r5, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004580:	4798      	blx	r3
 8004582:	3501      	adds	r5, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800458a:	4798      	blx	r3
 800458c:	3501      	adds	r5, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	08004e88 	.word	0x08004e88
 8004594:	08004e88 	.word	0x08004e88
 8004598:	08004e88 	.word	0x08004e88
 800459c:	08004e8c 	.word	0x08004e8c

080045a0 <memset>:
 80045a0:	4402      	add	r2, r0
 80045a2:	4603      	mov	r3, r0
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d100      	bne.n	80045aa <memset+0xa>
 80045a8:	4770      	bx	lr
 80045aa:	f803 1b01 	strb.w	r1, [r3], #1
 80045ae:	e7f9      	b.n	80045a4 <memset+0x4>

080045b0 <siprintf>:
 80045b0:	b40e      	push	{r1, r2, r3}
 80045b2:	b500      	push	{lr}
 80045b4:	b09c      	sub	sp, #112	; 0x70
 80045b6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80045ba:	ab1d      	add	r3, sp, #116	; 0x74
 80045bc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80045c0:	9002      	str	r0, [sp, #8]
 80045c2:	9006      	str	r0, [sp, #24]
 80045c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045c8:	480a      	ldr	r0, [pc, #40]	; (80045f4 <siprintf+0x44>)
 80045ca:	9104      	str	r1, [sp, #16]
 80045cc:	9107      	str	r1, [sp, #28]
 80045ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80045d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80045d6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	a902      	add	r1, sp, #8
 80045e0:	f000 f866 	bl	80046b0 <_svfiprintf_r>
 80045e4:	9b02      	ldr	r3, [sp, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	b01c      	add	sp, #112	; 0x70
 80045ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f0:	b003      	add	sp, #12
 80045f2:	4770      	bx	lr
 80045f4:	2000000c 	.word	0x2000000c

080045f8 <__ssputs_r>:
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	688e      	ldr	r6, [r1, #8]
 80045fe:	429e      	cmp	r6, r3
 8004600:	4682      	mov	sl, r0
 8004602:	460c      	mov	r4, r1
 8004604:	4691      	mov	r9, r2
 8004606:	4698      	mov	r8, r3
 8004608:	d835      	bhi.n	8004676 <__ssputs_r+0x7e>
 800460a:	898a      	ldrh	r2, [r1, #12]
 800460c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004610:	d031      	beq.n	8004676 <__ssputs_r+0x7e>
 8004612:	6825      	ldr	r5, [r4, #0]
 8004614:	6909      	ldr	r1, [r1, #16]
 8004616:	1a6f      	subs	r7, r5, r1
 8004618:	6965      	ldr	r5, [r4, #20]
 800461a:	2302      	movs	r3, #2
 800461c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004620:	fb95 f5f3 	sdiv	r5, r5, r3
 8004624:	f108 0301 	add.w	r3, r8, #1
 8004628:	443b      	add	r3, r7
 800462a:	429d      	cmp	r5, r3
 800462c:	bf38      	it	cc
 800462e:	461d      	movcc	r5, r3
 8004630:	0553      	lsls	r3, r2, #21
 8004632:	d531      	bpl.n	8004698 <__ssputs_r+0xa0>
 8004634:	4629      	mov	r1, r5
 8004636:	f000 fb39 	bl	8004cac <_malloc_r>
 800463a:	4606      	mov	r6, r0
 800463c:	b950      	cbnz	r0, 8004654 <__ssputs_r+0x5c>
 800463e:	230c      	movs	r3, #12
 8004640:	f8ca 3000 	str.w	r3, [sl]
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	f04f 30ff 	mov.w	r0, #4294967295
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004654:	463a      	mov	r2, r7
 8004656:	6921      	ldr	r1, [r4, #16]
 8004658:	f000 fab4 	bl	8004bc4 <memcpy>
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004666:	81a3      	strh	r3, [r4, #12]
 8004668:	6126      	str	r6, [r4, #16]
 800466a:	6165      	str	r5, [r4, #20]
 800466c:	443e      	add	r6, r7
 800466e:	1bed      	subs	r5, r5, r7
 8004670:	6026      	str	r6, [r4, #0]
 8004672:	60a5      	str	r5, [r4, #8]
 8004674:	4646      	mov	r6, r8
 8004676:	4546      	cmp	r6, r8
 8004678:	bf28      	it	cs
 800467a:	4646      	movcs	r6, r8
 800467c:	4632      	mov	r2, r6
 800467e:	4649      	mov	r1, r9
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	f000 faaa 	bl	8004bda <memmove>
 8004686:	68a3      	ldr	r3, [r4, #8]
 8004688:	1b9b      	subs	r3, r3, r6
 800468a:	60a3      	str	r3, [r4, #8]
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	441e      	add	r6, r3
 8004690:	6026      	str	r6, [r4, #0]
 8004692:	2000      	movs	r0, #0
 8004694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004698:	462a      	mov	r2, r5
 800469a:	f000 fb65 	bl	8004d68 <_realloc_r>
 800469e:	4606      	mov	r6, r0
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d1e1      	bne.n	8004668 <__ssputs_r+0x70>
 80046a4:	6921      	ldr	r1, [r4, #16]
 80046a6:	4650      	mov	r0, sl
 80046a8:	f000 fab2 	bl	8004c10 <_free_r>
 80046ac:	e7c7      	b.n	800463e <__ssputs_r+0x46>
	...

080046b0 <_svfiprintf_r>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	b09d      	sub	sp, #116	; 0x74
 80046b6:	4680      	mov	r8, r0
 80046b8:	9303      	str	r3, [sp, #12]
 80046ba:	898b      	ldrh	r3, [r1, #12]
 80046bc:	061c      	lsls	r4, r3, #24
 80046be:	460d      	mov	r5, r1
 80046c0:	4616      	mov	r6, r2
 80046c2:	d50f      	bpl.n	80046e4 <_svfiprintf_r+0x34>
 80046c4:	690b      	ldr	r3, [r1, #16]
 80046c6:	b96b      	cbnz	r3, 80046e4 <_svfiprintf_r+0x34>
 80046c8:	2140      	movs	r1, #64	; 0x40
 80046ca:	f000 faef 	bl	8004cac <_malloc_r>
 80046ce:	6028      	str	r0, [r5, #0]
 80046d0:	6128      	str	r0, [r5, #16]
 80046d2:	b928      	cbnz	r0, 80046e0 <_svfiprintf_r+0x30>
 80046d4:	230c      	movs	r3, #12
 80046d6:	f8c8 3000 	str.w	r3, [r8]
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	e0c5      	b.n	800486c <_svfiprintf_r+0x1bc>
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	616b      	str	r3, [r5, #20]
 80046e4:	2300      	movs	r3, #0
 80046e6:	9309      	str	r3, [sp, #36]	; 0x24
 80046e8:	2320      	movs	r3, #32
 80046ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ee:	2330      	movs	r3, #48	; 0x30
 80046f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046f4:	f04f 0b01 	mov.w	fp, #1
 80046f8:	4637      	mov	r7, r6
 80046fa:	463c      	mov	r4, r7
 80046fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d13c      	bne.n	800477e <_svfiprintf_r+0xce>
 8004704:	ebb7 0a06 	subs.w	sl, r7, r6
 8004708:	d00b      	beq.n	8004722 <_svfiprintf_r+0x72>
 800470a:	4653      	mov	r3, sl
 800470c:	4632      	mov	r2, r6
 800470e:	4629      	mov	r1, r5
 8004710:	4640      	mov	r0, r8
 8004712:	f7ff ff71 	bl	80045f8 <__ssputs_r>
 8004716:	3001      	adds	r0, #1
 8004718:	f000 80a3 	beq.w	8004862 <_svfiprintf_r+0x1b2>
 800471c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800471e:	4453      	add	r3, sl
 8004720:	9309      	str	r3, [sp, #36]	; 0x24
 8004722:	783b      	ldrb	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 809c 	beq.w	8004862 <_svfiprintf_r+0x1b2>
 800472a:	2300      	movs	r3, #0
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	9307      	str	r3, [sp, #28]
 8004734:	9205      	str	r2, [sp, #20]
 8004736:	9306      	str	r3, [sp, #24]
 8004738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800473c:	931a      	str	r3, [sp, #104]	; 0x68
 800473e:	2205      	movs	r2, #5
 8004740:	7821      	ldrb	r1, [r4, #0]
 8004742:	4850      	ldr	r0, [pc, #320]	; (8004884 <_svfiprintf_r+0x1d4>)
 8004744:	f7fb fd54 	bl	80001f0 <memchr>
 8004748:	1c67      	adds	r7, r4, #1
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	b9d8      	cbnz	r0, 8004786 <_svfiprintf_r+0xd6>
 800474e:	06d9      	lsls	r1, r3, #27
 8004750:	bf44      	itt	mi
 8004752:	2220      	movmi	r2, #32
 8004754:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004758:	071a      	lsls	r2, r3, #28
 800475a:	bf44      	itt	mi
 800475c:	222b      	movmi	r2, #43	; 0x2b
 800475e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004762:	7822      	ldrb	r2, [r4, #0]
 8004764:	2a2a      	cmp	r2, #42	; 0x2a
 8004766:	d016      	beq.n	8004796 <_svfiprintf_r+0xe6>
 8004768:	9a07      	ldr	r2, [sp, #28]
 800476a:	2100      	movs	r1, #0
 800476c:	200a      	movs	r0, #10
 800476e:	4627      	mov	r7, r4
 8004770:	3401      	adds	r4, #1
 8004772:	783b      	ldrb	r3, [r7, #0]
 8004774:	3b30      	subs	r3, #48	; 0x30
 8004776:	2b09      	cmp	r3, #9
 8004778:	d951      	bls.n	800481e <_svfiprintf_r+0x16e>
 800477a:	b1c9      	cbz	r1, 80047b0 <_svfiprintf_r+0x100>
 800477c:	e011      	b.n	80047a2 <_svfiprintf_r+0xf2>
 800477e:	2b25      	cmp	r3, #37	; 0x25
 8004780:	d0c0      	beq.n	8004704 <_svfiprintf_r+0x54>
 8004782:	4627      	mov	r7, r4
 8004784:	e7b9      	b.n	80046fa <_svfiprintf_r+0x4a>
 8004786:	4a3f      	ldr	r2, [pc, #252]	; (8004884 <_svfiprintf_r+0x1d4>)
 8004788:	1a80      	subs	r0, r0, r2
 800478a:	fa0b f000 	lsl.w	r0, fp, r0
 800478e:	4318      	orrs	r0, r3
 8004790:	9004      	str	r0, [sp, #16]
 8004792:	463c      	mov	r4, r7
 8004794:	e7d3      	b.n	800473e <_svfiprintf_r+0x8e>
 8004796:	9a03      	ldr	r2, [sp, #12]
 8004798:	1d11      	adds	r1, r2, #4
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	9103      	str	r1, [sp, #12]
 800479e:	2a00      	cmp	r2, #0
 80047a0:	db01      	blt.n	80047a6 <_svfiprintf_r+0xf6>
 80047a2:	9207      	str	r2, [sp, #28]
 80047a4:	e004      	b.n	80047b0 <_svfiprintf_r+0x100>
 80047a6:	4252      	negs	r2, r2
 80047a8:	f043 0302 	orr.w	r3, r3, #2
 80047ac:	9207      	str	r2, [sp, #28]
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	783b      	ldrb	r3, [r7, #0]
 80047b2:	2b2e      	cmp	r3, #46	; 0x2e
 80047b4:	d10e      	bne.n	80047d4 <_svfiprintf_r+0x124>
 80047b6:	787b      	ldrb	r3, [r7, #1]
 80047b8:	2b2a      	cmp	r3, #42	; 0x2a
 80047ba:	f107 0101 	add.w	r1, r7, #1
 80047be:	d132      	bne.n	8004826 <_svfiprintf_r+0x176>
 80047c0:	9b03      	ldr	r3, [sp, #12]
 80047c2:	1d1a      	adds	r2, r3, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	9203      	str	r2, [sp, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bfb8      	it	lt
 80047cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80047d0:	3702      	adds	r7, #2
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	4c2c      	ldr	r4, [pc, #176]	; (8004888 <_svfiprintf_r+0x1d8>)
 80047d6:	7839      	ldrb	r1, [r7, #0]
 80047d8:	2203      	movs	r2, #3
 80047da:	4620      	mov	r0, r4
 80047dc:	f7fb fd08 	bl	80001f0 <memchr>
 80047e0:	b138      	cbz	r0, 80047f2 <_svfiprintf_r+0x142>
 80047e2:	2340      	movs	r3, #64	; 0x40
 80047e4:	1b00      	subs	r0, r0, r4
 80047e6:	fa03 f000 	lsl.w	r0, r3, r0
 80047ea:	9b04      	ldr	r3, [sp, #16]
 80047ec:	4303      	orrs	r3, r0
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	3701      	adds	r7, #1
 80047f2:	7839      	ldrb	r1, [r7, #0]
 80047f4:	4825      	ldr	r0, [pc, #148]	; (800488c <_svfiprintf_r+0x1dc>)
 80047f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047fa:	2206      	movs	r2, #6
 80047fc:	1c7e      	adds	r6, r7, #1
 80047fe:	f7fb fcf7 	bl	80001f0 <memchr>
 8004802:	2800      	cmp	r0, #0
 8004804:	d035      	beq.n	8004872 <_svfiprintf_r+0x1c2>
 8004806:	4b22      	ldr	r3, [pc, #136]	; (8004890 <_svfiprintf_r+0x1e0>)
 8004808:	b9fb      	cbnz	r3, 800484a <_svfiprintf_r+0x19a>
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	3307      	adds	r3, #7
 800480e:	f023 0307 	bic.w	r3, r3, #7
 8004812:	3308      	adds	r3, #8
 8004814:	9303      	str	r3, [sp, #12]
 8004816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004818:	444b      	add	r3, r9
 800481a:	9309      	str	r3, [sp, #36]	; 0x24
 800481c:	e76c      	b.n	80046f8 <_svfiprintf_r+0x48>
 800481e:	fb00 3202 	mla	r2, r0, r2, r3
 8004822:	2101      	movs	r1, #1
 8004824:	e7a3      	b.n	800476e <_svfiprintf_r+0xbe>
 8004826:	2300      	movs	r3, #0
 8004828:	9305      	str	r3, [sp, #20]
 800482a:	4618      	mov	r0, r3
 800482c:	240a      	movs	r4, #10
 800482e:	460f      	mov	r7, r1
 8004830:	3101      	adds	r1, #1
 8004832:	783a      	ldrb	r2, [r7, #0]
 8004834:	3a30      	subs	r2, #48	; 0x30
 8004836:	2a09      	cmp	r2, #9
 8004838:	d903      	bls.n	8004842 <_svfiprintf_r+0x192>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0ca      	beq.n	80047d4 <_svfiprintf_r+0x124>
 800483e:	9005      	str	r0, [sp, #20]
 8004840:	e7c8      	b.n	80047d4 <_svfiprintf_r+0x124>
 8004842:	fb04 2000 	mla	r0, r4, r0, r2
 8004846:	2301      	movs	r3, #1
 8004848:	e7f1      	b.n	800482e <_svfiprintf_r+0x17e>
 800484a:	ab03      	add	r3, sp, #12
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	462a      	mov	r2, r5
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <_svfiprintf_r+0x1e4>)
 8004852:	a904      	add	r1, sp, #16
 8004854:	4640      	mov	r0, r8
 8004856:	f3af 8000 	nop.w
 800485a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800485e:	4681      	mov	r9, r0
 8004860:	d1d9      	bne.n	8004816 <_svfiprintf_r+0x166>
 8004862:	89ab      	ldrh	r3, [r5, #12]
 8004864:	065b      	lsls	r3, r3, #25
 8004866:	f53f af38 	bmi.w	80046da <_svfiprintf_r+0x2a>
 800486a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800486c:	b01d      	add	sp, #116	; 0x74
 800486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004872:	ab03      	add	r3, sp, #12
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	462a      	mov	r2, r5
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <_svfiprintf_r+0x1e4>)
 800487a:	a904      	add	r1, sp, #16
 800487c:	4640      	mov	r0, r8
 800487e:	f000 f881 	bl	8004984 <_printf_i>
 8004882:	e7ea      	b.n	800485a <_svfiprintf_r+0x1aa>
 8004884:	08004e54 	.word	0x08004e54
 8004888:	08004e5a 	.word	0x08004e5a
 800488c:	08004e5e 	.word	0x08004e5e
 8004890:	00000000 	.word	0x00000000
 8004894:	080045f9 	.word	0x080045f9

08004898 <_printf_common>:
 8004898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800489c:	4691      	mov	r9, r2
 800489e:	461f      	mov	r7, r3
 80048a0:	688a      	ldr	r2, [r1, #8]
 80048a2:	690b      	ldr	r3, [r1, #16]
 80048a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a8:	4293      	cmp	r3, r2
 80048aa:	bfb8      	it	lt
 80048ac:	4613      	movlt	r3, r2
 80048ae:	f8c9 3000 	str.w	r3, [r9]
 80048b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048b6:	4606      	mov	r6, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	b112      	cbz	r2, 80048c2 <_printf_common+0x2a>
 80048bc:	3301      	adds	r3, #1
 80048be:	f8c9 3000 	str.w	r3, [r9]
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	0699      	lsls	r1, r3, #26
 80048c6:	bf42      	ittt	mi
 80048c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048cc:	3302      	addmi	r3, #2
 80048ce:	f8c9 3000 	strmi.w	r3, [r9]
 80048d2:	6825      	ldr	r5, [r4, #0]
 80048d4:	f015 0506 	ands.w	r5, r5, #6
 80048d8:	d107      	bne.n	80048ea <_printf_common+0x52>
 80048da:	f104 0a19 	add.w	sl, r4, #25
 80048de:	68e3      	ldr	r3, [r4, #12]
 80048e0:	f8d9 2000 	ldr.w	r2, [r9]
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	429d      	cmp	r5, r3
 80048e8:	db29      	blt.n	800493e <_printf_common+0xa6>
 80048ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048ee:	6822      	ldr	r2, [r4, #0]
 80048f0:	3300      	adds	r3, #0
 80048f2:	bf18      	it	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	0692      	lsls	r2, r2, #26
 80048f8:	d42e      	bmi.n	8004958 <_printf_common+0xc0>
 80048fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048fe:	4639      	mov	r1, r7
 8004900:	4630      	mov	r0, r6
 8004902:	47c0      	blx	r8
 8004904:	3001      	adds	r0, #1
 8004906:	d021      	beq.n	800494c <_printf_common+0xb4>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	68e5      	ldr	r5, [r4, #12]
 800490c:	f8d9 2000 	ldr.w	r2, [r9]
 8004910:	f003 0306 	and.w	r3, r3, #6
 8004914:	2b04      	cmp	r3, #4
 8004916:	bf08      	it	eq
 8004918:	1aad      	subeq	r5, r5, r2
 800491a:	68a3      	ldr	r3, [r4, #8]
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	bf0c      	ite	eq
 8004920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004924:	2500      	movne	r5, #0
 8004926:	4293      	cmp	r3, r2
 8004928:	bfc4      	itt	gt
 800492a:	1a9b      	subgt	r3, r3, r2
 800492c:	18ed      	addgt	r5, r5, r3
 800492e:	f04f 0900 	mov.w	r9, #0
 8004932:	341a      	adds	r4, #26
 8004934:	454d      	cmp	r5, r9
 8004936:	d11b      	bne.n	8004970 <_printf_common+0xd8>
 8004938:	2000      	movs	r0, #0
 800493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493e:	2301      	movs	r3, #1
 8004940:	4652      	mov	r2, sl
 8004942:	4639      	mov	r1, r7
 8004944:	4630      	mov	r0, r6
 8004946:	47c0      	blx	r8
 8004948:	3001      	adds	r0, #1
 800494a:	d103      	bne.n	8004954 <_printf_common+0xbc>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	3501      	adds	r5, #1
 8004956:	e7c2      	b.n	80048de <_printf_common+0x46>
 8004958:	18e1      	adds	r1, r4, r3
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	2030      	movs	r0, #48	; 0x30
 800495e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004962:	4422      	add	r2, r4
 8004964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800496c:	3302      	adds	r3, #2
 800496e:	e7c4      	b.n	80048fa <_printf_common+0x62>
 8004970:	2301      	movs	r3, #1
 8004972:	4622      	mov	r2, r4
 8004974:	4639      	mov	r1, r7
 8004976:	4630      	mov	r0, r6
 8004978:	47c0      	blx	r8
 800497a:	3001      	adds	r0, #1
 800497c:	d0e6      	beq.n	800494c <_printf_common+0xb4>
 800497e:	f109 0901 	add.w	r9, r9, #1
 8004982:	e7d7      	b.n	8004934 <_printf_common+0x9c>

08004984 <_printf_i>:
 8004984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004988:	4617      	mov	r7, r2
 800498a:	7e0a      	ldrb	r2, [r1, #24]
 800498c:	b085      	sub	sp, #20
 800498e:	2a6e      	cmp	r2, #110	; 0x6e
 8004990:	4698      	mov	r8, r3
 8004992:	4606      	mov	r6, r0
 8004994:	460c      	mov	r4, r1
 8004996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004998:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800499c:	f000 80bc 	beq.w	8004b18 <_printf_i+0x194>
 80049a0:	d81a      	bhi.n	80049d8 <_printf_i+0x54>
 80049a2:	2a63      	cmp	r2, #99	; 0x63
 80049a4:	d02e      	beq.n	8004a04 <_printf_i+0x80>
 80049a6:	d80a      	bhi.n	80049be <_printf_i+0x3a>
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	f000 80c8 	beq.w	8004b3e <_printf_i+0x1ba>
 80049ae:	2a58      	cmp	r2, #88	; 0x58
 80049b0:	f000 808a 	beq.w	8004ac8 <_printf_i+0x144>
 80049b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80049bc:	e02a      	b.n	8004a14 <_printf_i+0x90>
 80049be:	2a64      	cmp	r2, #100	; 0x64
 80049c0:	d001      	beq.n	80049c6 <_printf_i+0x42>
 80049c2:	2a69      	cmp	r2, #105	; 0x69
 80049c4:	d1f6      	bne.n	80049b4 <_printf_i+0x30>
 80049c6:	6821      	ldr	r1, [r4, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80049ce:	d023      	beq.n	8004a18 <_printf_i+0x94>
 80049d0:	1d11      	adds	r1, r2, #4
 80049d2:	6019      	str	r1, [r3, #0]
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	e027      	b.n	8004a28 <_printf_i+0xa4>
 80049d8:	2a73      	cmp	r2, #115	; 0x73
 80049da:	f000 80b4 	beq.w	8004b46 <_printf_i+0x1c2>
 80049de:	d808      	bhi.n	80049f2 <_printf_i+0x6e>
 80049e0:	2a6f      	cmp	r2, #111	; 0x6f
 80049e2:	d02a      	beq.n	8004a3a <_printf_i+0xb6>
 80049e4:	2a70      	cmp	r2, #112	; 0x70
 80049e6:	d1e5      	bne.n	80049b4 <_printf_i+0x30>
 80049e8:	680a      	ldr	r2, [r1, #0]
 80049ea:	f042 0220 	orr.w	r2, r2, #32
 80049ee:	600a      	str	r2, [r1, #0]
 80049f0:	e003      	b.n	80049fa <_printf_i+0x76>
 80049f2:	2a75      	cmp	r2, #117	; 0x75
 80049f4:	d021      	beq.n	8004a3a <_printf_i+0xb6>
 80049f6:	2a78      	cmp	r2, #120	; 0x78
 80049f8:	d1dc      	bne.n	80049b4 <_printf_i+0x30>
 80049fa:	2278      	movs	r2, #120	; 0x78
 80049fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004a00:	496e      	ldr	r1, [pc, #440]	; (8004bbc <_printf_i+0x238>)
 8004a02:	e064      	b.n	8004ace <_printf_i+0x14a>
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004a0a:	1d11      	adds	r1, r2, #4
 8004a0c:	6019      	str	r1, [r3, #0]
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0a3      	b.n	8004b60 <_printf_i+0x1dc>
 8004a18:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004a1c:	f102 0104 	add.w	r1, r2, #4
 8004a20:	6019      	str	r1, [r3, #0]
 8004a22:	d0d7      	beq.n	80049d4 <_printf_i+0x50>
 8004a24:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da03      	bge.n	8004a34 <_printf_i+0xb0>
 8004a2c:	222d      	movs	r2, #45	; 0x2d
 8004a2e:	425b      	negs	r3, r3
 8004a30:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a34:	4962      	ldr	r1, [pc, #392]	; (8004bc0 <_printf_i+0x23c>)
 8004a36:	220a      	movs	r2, #10
 8004a38:	e017      	b.n	8004a6a <_printf_i+0xe6>
 8004a3a:	6820      	ldr	r0, [r4, #0]
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004a42:	d003      	beq.n	8004a4c <_printf_i+0xc8>
 8004a44:	1d08      	adds	r0, r1, #4
 8004a46:	6018      	str	r0, [r3, #0]
 8004a48:	680b      	ldr	r3, [r1, #0]
 8004a4a:	e006      	b.n	8004a5a <_printf_i+0xd6>
 8004a4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a50:	f101 0004 	add.w	r0, r1, #4
 8004a54:	6018      	str	r0, [r3, #0]
 8004a56:	d0f7      	beq.n	8004a48 <_printf_i+0xc4>
 8004a58:	880b      	ldrh	r3, [r1, #0]
 8004a5a:	4959      	ldr	r1, [pc, #356]	; (8004bc0 <_printf_i+0x23c>)
 8004a5c:	2a6f      	cmp	r2, #111	; 0x6f
 8004a5e:	bf14      	ite	ne
 8004a60:	220a      	movne	r2, #10
 8004a62:	2208      	moveq	r2, #8
 8004a64:	2000      	movs	r0, #0
 8004a66:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004a6a:	6865      	ldr	r5, [r4, #4]
 8004a6c:	60a5      	str	r5, [r4, #8]
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	f2c0 809c 	blt.w	8004bac <_printf_i+0x228>
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	f020 0004 	bic.w	r0, r0, #4
 8004a7a:	6020      	str	r0, [r4, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d13f      	bne.n	8004b00 <_printf_i+0x17c>
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	f040 8095 	bne.w	8004bb0 <_printf_i+0x22c>
 8004a86:	4675      	mov	r5, lr
 8004a88:	2a08      	cmp	r2, #8
 8004a8a:	d10b      	bne.n	8004aa4 <_printf_i+0x120>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	07da      	lsls	r2, r3, #31
 8004a90:	d508      	bpl.n	8004aa4 <_printf_i+0x120>
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	6862      	ldr	r2, [r4, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	bfde      	ittt	le
 8004a9a:	2330      	movle	r3, #48	; 0x30
 8004a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aa4:	ebae 0305 	sub.w	r3, lr, r5
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	f8cd 8000 	str.w	r8, [sp]
 8004aae:	463b      	mov	r3, r7
 8004ab0:	aa03      	add	r2, sp, #12
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7ff feef 	bl	8004898 <_printf_common>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d155      	bne.n	8004b6a <_printf_i+0x1e6>
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac2:	b005      	add	sp, #20
 8004ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ac8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004acc:	493c      	ldr	r1, [pc, #240]	; (8004bc0 <_printf_i+0x23c>)
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ad6:	f100 0504 	add.w	r5, r0, #4
 8004ada:	601d      	str	r5, [r3, #0]
 8004adc:	d001      	beq.n	8004ae2 <_printf_i+0x15e>
 8004ade:	6803      	ldr	r3, [r0, #0]
 8004ae0:	e002      	b.n	8004ae8 <_printf_i+0x164>
 8004ae2:	0655      	lsls	r5, r2, #25
 8004ae4:	d5fb      	bpl.n	8004ade <_printf_i+0x15a>
 8004ae6:	8803      	ldrh	r3, [r0, #0]
 8004ae8:	07d0      	lsls	r0, r2, #31
 8004aea:	bf44      	itt	mi
 8004aec:	f042 0220 	orrmi.w	r2, r2, #32
 8004af0:	6022      	strmi	r2, [r4, #0]
 8004af2:	b91b      	cbnz	r3, 8004afc <_printf_i+0x178>
 8004af4:	6822      	ldr	r2, [r4, #0]
 8004af6:	f022 0220 	bic.w	r2, r2, #32
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	2210      	movs	r2, #16
 8004afe:	e7b1      	b.n	8004a64 <_printf_i+0xe0>
 8004b00:	4675      	mov	r5, lr
 8004b02:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b06:	fb02 3310 	mls	r3, r2, r0, r3
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b10:	4603      	mov	r3, r0
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d1f5      	bne.n	8004b02 <_printf_i+0x17e>
 8004b16:	e7b7      	b.n	8004a88 <_printf_i+0x104>
 8004b18:	6808      	ldr	r0, [r1, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	6949      	ldr	r1, [r1, #20]
 8004b1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004b22:	d004      	beq.n	8004b2e <_printf_i+0x1aa>
 8004b24:	1d10      	adds	r0, r2, #4
 8004b26:	6018      	str	r0, [r3, #0]
 8004b28:	6813      	ldr	r3, [r2, #0]
 8004b2a:	6019      	str	r1, [r3, #0]
 8004b2c:	e007      	b.n	8004b3e <_printf_i+0x1ba>
 8004b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b32:	f102 0004 	add.w	r0, r2, #4
 8004b36:	6018      	str	r0, [r3, #0]
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	d0f6      	beq.n	8004b2a <_printf_i+0x1a6>
 8004b3c:	8019      	strh	r1, [r3, #0]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	4675      	mov	r5, lr
 8004b44:	e7b1      	b.n	8004aaa <_printf_i+0x126>
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	1d11      	adds	r1, r2, #4
 8004b4a:	6019      	str	r1, [r3, #0]
 8004b4c:	6815      	ldr	r5, [r2, #0]
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	2100      	movs	r1, #0
 8004b52:	4628      	mov	r0, r5
 8004b54:	f7fb fb4c 	bl	80001f0 <memchr>
 8004b58:	b108      	cbz	r0, 8004b5e <_printf_i+0x1da>
 8004b5a:	1b40      	subs	r0, r0, r5
 8004b5c:	6060      	str	r0, [r4, #4]
 8004b5e:	6863      	ldr	r3, [r4, #4]
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	2300      	movs	r3, #0
 8004b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b68:	e79f      	b.n	8004aaa <_printf_i+0x126>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	4639      	mov	r1, r7
 8004b70:	4630      	mov	r0, r6
 8004b72:	47c0      	blx	r8
 8004b74:	3001      	adds	r0, #1
 8004b76:	d0a2      	beq.n	8004abe <_printf_i+0x13a>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	079b      	lsls	r3, r3, #30
 8004b7c:	d507      	bpl.n	8004b8e <_printf_i+0x20a>
 8004b7e:	2500      	movs	r5, #0
 8004b80:	f104 0919 	add.w	r9, r4, #25
 8004b84:	68e3      	ldr	r3, [r4, #12]
 8004b86:	9a03      	ldr	r2, [sp, #12]
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	429d      	cmp	r5, r3
 8004b8c:	db05      	blt.n	8004b9a <_printf_i+0x216>
 8004b8e:	68e0      	ldr	r0, [r4, #12]
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	4298      	cmp	r0, r3
 8004b94:	bfb8      	it	lt
 8004b96:	4618      	movlt	r0, r3
 8004b98:	e793      	b.n	8004ac2 <_printf_i+0x13e>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	464a      	mov	r2, r9
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d08a      	beq.n	8004abe <_printf_i+0x13a>
 8004ba8:	3501      	adds	r5, #1
 8004baa:	e7eb      	b.n	8004b84 <_printf_i+0x200>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1a7      	bne.n	8004b00 <_printf_i+0x17c>
 8004bb0:	780b      	ldrb	r3, [r1, #0]
 8004bb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bba:	e765      	b.n	8004a88 <_printf_i+0x104>
 8004bbc:	08004e76 	.word	0x08004e76
 8004bc0:	08004e65 	.word	0x08004e65

08004bc4 <memcpy>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	1e43      	subs	r3, r0, #1
 8004bc8:	440a      	add	r2, r1
 8004bca:	4291      	cmp	r1, r2
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	bd10      	pop	{r4, pc}
 8004bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bd8:	e7f7      	b.n	8004bca <memcpy+0x6>

08004bda <memmove>:
 8004bda:	4288      	cmp	r0, r1
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	eb01 0302 	add.w	r3, r1, r2
 8004be2:	d803      	bhi.n	8004bec <memmove+0x12>
 8004be4:	1e42      	subs	r2, r0, #1
 8004be6:	4299      	cmp	r1, r3
 8004be8:	d10c      	bne.n	8004c04 <memmove+0x2a>
 8004bea:	bd10      	pop	{r4, pc}
 8004bec:	4298      	cmp	r0, r3
 8004bee:	d2f9      	bcs.n	8004be4 <memmove+0xa>
 8004bf0:	1881      	adds	r1, r0, r2
 8004bf2:	1ad2      	subs	r2, r2, r3
 8004bf4:	42d3      	cmn	r3, r2
 8004bf6:	d100      	bne.n	8004bfa <memmove+0x20>
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bfe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c02:	e7f7      	b.n	8004bf4 <memmove+0x1a>
 8004c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c0c:	e7eb      	b.n	8004be6 <memmove+0xc>
	...

08004c10 <_free_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d045      	beq.n	8004ca4 <_free_r+0x94>
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f0c      	subs	r4, r1, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	f000 f8d6 	bl	8004dd4 <__malloc_lock>
 8004c28:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <_free_r+0x98>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	b933      	cbnz	r3, 8004c3e <_free_r+0x2e>
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	6014      	str	r4, [r2, #0]
 8004c34:	4628      	mov	r0, r5
 8004c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c3a:	f000 b8cc 	b.w	8004dd6 <__malloc_unlock>
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	d90c      	bls.n	8004c5c <_free_r+0x4c>
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	1862      	adds	r2, r4, r1
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bf04      	itt	eq
 8004c4a:	681a      	ldreq	r2, [r3, #0]
 8004c4c:	685b      	ldreq	r3, [r3, #4]
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	bf04      	itt	eq
 8004c52:	1852      	addeq	r2, r2, r1
 8004c54:	6022      	streq	r2, [r4, #0]
 8004c56:	6004      	str	r4, [r0, #0]
 8004c58:	e7ec      	b.n	8004c34 <_free_r+0x24>
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	b10a      	cbz	r2, 8004c64 <_free_r+0x54>
 8004c60:	42a2      	cmp	r2, r4
 8004c62:	d9fa      	bls.n	8004c5a <_free_r+0x4a>
 8004c64:	6819      	ldr	r1, [r3, #0]
 8004c66:	1858      	adds	r0, r3, r1
 8004c68:	42a0      	cmp	r0, r4
 8004c6a:	d10b      	bne.n	8004c84 <_free_r+0x74>
 8004c6c:	6820      	ldr	r0, [r4, #0]
 8004c6e:	4401      	add	r1, r0
 8004c70:	1858      	adds	r0, r3, r1
 8004c72:	4282      	cmp	r2, r0
 8004c74:	6019      	str	r1, [r3, #0]
 8004c76:	d1dd      	bne.n	8004c34 <_free_r+0x24>
 8004c78:	6810      	ldr	r0, [r2, #0]
 8004c7a:	6852      	ldr	r2, [r2, #4]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	4401      	add	r1, r0
 8004c80:	6019      	str	r1, [r3, #0]
 8004c82:	e7d7      	b.n	8004c34 <_free_r+0x24>
 8004c84:	d902      	bls.n	8004c8c <_free_r+0x7c>
 8004c86:	230c      	movs	r3, #12
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	e7d3      	b.n	8004c34 <_free_r+0x24>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	1821      	adds	r1, r4, r0
 8004c90:	428a      	cmp	r2, r1
 8004c92:	bf04      	itt	eq
 8004c94:	6811      	ldreq	r1, [r2, #0]
 8004c96:	6852      	ldreq	r2, [r2, #4]
 8004c98:	6062      	str	r2, [r4, #4]
 8004c9a:	bf04      	itt	eq
 8004c9c:	1809      	addeq	r1, r1, r0
 8004c9e:	6021      	streq	r1, [r4, #0]
 8004ca0:	605c      	str	r4, [r3, #4]
 8004ca2:	e7c7      	b.n	8004c34 <_free_r+0x24>
 8004ca4:	bd38      	pop	{r3, r4, r5, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200000a0 	.word	0x200000a0

08004cac <_malloc_r>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	1ccd      	adds	r5, r1, #3
 8004cb0:	f025 0503 	bic.w	r5, r5, #3
 8004cb4:	3508      	adds	r5, #8
 8004cb6:	2d0c      	cmp	r5, #12
 8004cb8:	bf38      	it	cc
 8004cba:	250c      	movcc	r5, #12
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	db01      	blt.n	8004cc6 <_malloc_r+0x1a>
 8004cc2:	42a9      	cmp	r1, r5
 8004cc4:	d903      	bls.n	8004cce <_malloc_r+0x22>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	6033      	str	r3, [r6, #0]
 8004cca:	2000      	movs	r0, #0
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
 8004cce:	f000 f881 	bl	8004dd4 <__malloc_lock>
 8004cd2:	4a23      	ldr	r2, [pc, #140]	; (8004d60 <_malloc_r+0xb4>)
 8004cd4:	6814      	ldr	r4, [r2, #0]
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	b991      	cbnz	r1, 8004d00 <_malloc_r+0x54>
 8004cda:	4c22      	ldr	r4, [pc, #136]	; (8004d64 <_malloc_r+0xb8>)
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	b91b      	cbnz	r3, 8004ce8 <_malloc_r+0x3c>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 f867 	bl	8004db4 <_sbrk_r>
 8004ce6:	6020      	str	r0, [r4, #0]
 8004ce8:	4629      	mov	r1, r5
 8004cea:	4630      	mov	r0, r6
 8004cec:	f000 f862 	bl	8004db4 <_sbrk_r>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d126      	bne.n	8004d42 <_malloc_r+0x96>
 8004cf4:	230c      	movs	r3, #12
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 f86c 	bl	8004dd6 <__malloc_unlock>
 8004cfe:	e7e4      	b.n	8004cca <_malloc_r+0x1e>
 8004d00:	680b      	ldr	r3, [r1, #0]
 8004d02:	1b5b      	subs	r3, r3, r5
 8004d04:	d41a      	bmi.n	8004d3c <_malloc_r+0x90>
 8004d06:	2b0b      	cmp	r3, #11
 8004d08:	d90f      	bls.n	8004d2a <_malloc_r+0x7e>
 8004d0a:	600b      	str	r3, [r1, #0]
 8004d0c:	50cd      	str	r5, [r1, r3]
 8004d0e:	18cc      	adds	r4, r1, r3
 8004d10:	4630      	mov	r0, r6
 8004d12:	f000 f860 	bl	8004dd6 <__malloc_unlock>
 8004d16:	f104 000b 	add.w	r0, r4, #11
 8004d1a:	1d23      	adds	r3, r4, #4
 8004d1c:	f020 0007 	bic.w	r0, r0, #7
 8004d20:	1ac3      	subs	r3, r0, r3
 8004d22:	d01b      	beq.n	8004d5c <_malloc_r+0xb0>
 8004d24:	425a      	negs	r2, r3
 8004d26:	50e2      	str	r2, [r4, r3]
 8004d28:	bd70      	pop	{r4, r5, r6, pc}
 8004d2a:	428c      	cmp	r4, r1
 8004d2c:	bf0d      	iteet	eq
 8004d2e:	6863      	ldreq	r3, [r4, #4]
 8004d30:	684b      	ldrne	r3, [r1, #4]
 8004d32:	6063      	strne	r3, [r4, #4]
 8004d34:	6013      	streq	r3, [r2, #0]
 8004d36:	bf18      	it	ne
 8004d38:	460c      	movne	r4, r1
 8004d3a:	e7e9      	b.n	8004d10 <_malloc_r+0x64>
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	6849      	ldr	r1, [r1, #4]
 8004d40:	e7ca      	b.n	8004cd8 <_malloc_r+0x2c>
 8004d42:	1cc4      	adds	r4, r0, #3
 8004d44:	f024 0403 	bic.w	r4, r4, #3
 8004d48:	42a0      	cmp	r0, r4
 8004d4a:	d005      	beq.n	8004d58 <_malloc_r+0xac>
 8004d4c:	1a21      	subs	r1, r4, r0
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f000 f830 	bl	8004db4 <_sbrk_r>
 8004d54:	3001      	adds	r0, #1
 8004d56:	d0cd      	beq.n	8004cf4 <_malloc_r+0x48>
 8004d58:	6025      	str	r5, [r4, #0]
 8004d5a:	e7d9      	b.n	8004d10 <_malloc_r+0x64>
 8004d5c:	bd70      	pop	{r4, r5, r6, pc}
 8004d5e:	bf00      	nop
 8004d60:	200000a0 	.word	0x200000a0
 8004d64:	200000a4 	.word	0x200000a4

08004d68 <_realloc_r>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	4607      	mov	r7, r0
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	460e      	mov	r6, r1
 8004d70:	b921      	cbnz	r1, 8004d7c <_realloc_r+0x14>
 8004d72:	4611      	mov	r1, r2
 8004d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d78:	f7ff bf98 	b.w	8004cac <_malloc_r>
 8004d7c:	b922      	cbnz	r2, 8004d88 <_realloc_r+0x20>
 8004d7e:	f7ff ff47 	bl	8004c10 <_free_r>
 8004d82:	4625      	mov	r5, r4
 8004d84:	4628      	mov	r0, r5
 8004d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d88:	f000 f826 	bl	8004dd8 <_malloc_usable_size_r>
 8004d8c:	4284      	cmp	r4, r0
 8004d8e:	d90f      	bls.n	8004db0 <_realloc_r+0x48>
 8004d90:	4621      	mov	r1, r4
 8004d92:	4638      	mov	r0, r7
 8004d94:	f7ff ff8a 	bl	8004cac <_malloc_r>
 8004d98:	4605      	mov	r5, r0
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d0f2      	beq.n	8004d84 <_realloc_r+0x1c>
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4622      	mov	r2, r4
 8004da2:	f7ff ff0f 	bl	8004bc4 <memcpy>
 8004da6:	4631      	mov	r1, r6
 8004da8:	4638      	mov	r0, r7
 8004daa:	f7ff ff31 	bl	8004c10 <_free_r>
 8004dae:	e7e9      	b.n	8004d84 <_realloc_r+0x1c>
 8004db0:	4635      	mov	r5, r6
 8004db2:	e7e7      	b.n	8004d84 <_realloc_r+0x1c>

08004db4 <_sbrk_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4c06      	ldr	r4, [pc, #24]	; (8004dd0 <_sbrk_r+0x1c>)
 8004db8:	2300      	movs	r3, #0
 8004dba:	4605      	mov	r5, r0
 8004dbc:	4608      	mov	r0, r1
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	f7fc f97e 	bl	80010c0 <_sbrk>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_sbrk_r+0x1a>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_sbrk_r+0x1a>
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	200001d0 	.word	0x200001d0

08004dd4 <__malloc_lock>:
 8004dd4:	4770      	bx	lr

08004dd6 <__malloc_unlock>:
 8004dd6:	4770      	bx	lr

08004dd8 <_malloc_usable_size_r>:
 8004dd8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	f1a0 0004 	sub.w	r0, r0, #4
 8004de2:	bfbc      	itt	lt
 8004de4:	580b      	ldrlt	r3, [r1, r0]
 8004de6:	18c0      	addlt	r0, r0, r3
 8004de8:	4770      	bx	lr
	...

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr
